
Hello_World.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004668  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048ac  080048ac  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080048ac  080048ac  000148ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048b4  080048b4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080048bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012de0  20000078  08004934  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e58  08004934  00022e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f71d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002594  00000000  00000000  0002f7c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba8  00000000  00000000  00031d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a90  00000000  00000000  00032908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002269f  00000000  00000000  00033398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a5e6  00000000  00000000  00055a37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb71e  00000000  00000000  0006001d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012b73b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003488  00000000  00000000  0012b7b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047e0 	.word	0x080047e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080047e0 	.word	0x080047e0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
void setupHardware();
void setupUART();


int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8
//	Reset the RCC clock configuration to the default reset state.
	HAL_RCC_DeInit();
 80004d6:	f000 fd35 	bl	8000f44 <HAL_RCC_DeInit>
	SystemCoreClockUpdate();
 80004da:	f000 f9cf 	bl	800087c <SystemCoreClockUpdate>
	setupHardware();
 80004de:	f000 f837 	bl	8000550 <setupHardware>
	xTaskCreate( Task1_Handler,"Task1",configMINIMAL_STACK_SIZE,NULL,2,&Task_Handle1);
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <main+0x40>)
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	2302      	movs	r3, #2
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	2282      	movs	r2, #130	; 0x82
 80004ee:	4909      	ldr	r1, [pc, #36]	; (8000514 <main+0x44>)
 80004f0:	4809      	ldr	r0, [pc, #36]	; (8000518 <main+0x48>)
 80004f2:	f001 ff43 	bl	800237c <xTaskCreate>
	xTaskCreate( Task2_Handler,"Task2",configMINIMAL_STACK_SIZE,NULL,2,&Task_Handle2);
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <main+0x4c>)
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2302      	movs	r3, #2
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	2282      	movs	r2, #130	; 0x82
 8000502:	4907      	ldr	r1, [pc, #28]	; (8000520 <main+0x50>)
 8000504:	4807      	ldr	r0, [pc, #28]	; (8000524 <main+0x54>)
 8000506:	f001 ff39 	bl	800237c <xTaskCreate>
	vTaskStartScheduler();
 800050a:	f002 f87b 	bl	8002604 <vTaskStartScheduler>
	for(;;);
 800050e:	e7fe      	b.n	800050e <main+0x3e>
 8000510:	20000094 	.word	0x20000094
 8000514:	080047f8 	.word	0x080047f8
 8000518:	08000529 	.word	0x08000529
 800051c:	20000098 	.word	0x20000098
 8000520:	08004800 	.word	0x08004800
 8000524:	0800053d 	.word	0x0800053d

08000528 <Task1_Handler>:
}
void Task1_Handler(void *params)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("Task 1\n");
 8000530:	4801      	ldr	r0, [pc, #4]	; (8000538 <Task1_Handler+0x10>)
 8000532:	f003 fd49 	bl	8003fc8 <puts>
 8000536:	e7fb      	b.n	8000530 <Task1_Handler+0x8>
 8000538:	08004808 	.word	0x08004808

0800053c <Task2_Handler>:
	}
}
void Task2_Handler(void *params)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("Task 2\n");
 8000544:	4801      	ldr	r0, [pc, #4]	; (800054c <Task2_Handler+0x10>)
 8000546:	f003 fd3f 	bl	8003fc8 <puts>
 800054a:	e7fb      	b.n	8000544 <Task2_Handler+0x8>
 800054c:	08004810 	.word	0x08004810

08000550 <setupHardware>:
	}
}
void setupHardware()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	setupUART();
 8000554:	f000 f802 	bl	800055c <setupUART>
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}

0800055c <setupUART>:
void setupUART()
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b09e      	sub	sp, #120	; 0x78
 8000560:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef init_gpio_uart;
	UART_HandleTypeDef uart_handle;
	UART_InitTypeDef init_uart_param;
	//	Enable the USART2 Clock for PA2(TX) and PA3(RX).
	__HAL_RCC_USART2_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b2e      	ldr	r3, [pc, #184]	; (8000620 <setupUART+0xc4>)
 8000568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056a:	4a2d      	ldr	r2, [pc, #180]	; (8000620 <setupUART+0xc4>)
 800056c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000570:	6413      	str	r3, [r2, #64]	; 0x40
 8000572:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <setupUART+0xc4>)
 8000574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	603b      	str	r3, [r7, #0]
 8000582:	4b27      	ldr	r3, [pc, #156]	; (8000620 <setupUART+0xc4>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a26      	ldr	r2, [pc, #152]	; (8000620 <setupUART+0xc4>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b24      	ldr	r3, [pc, #144]	; (8000620 <setupUART+0xc4>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]
	memset(&init_gpio_uart,0,sizeof(init_gpio_uart));
 800059a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800059e:	2214      	movs	r2, #20
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 fcab 	bl	8003efe <memset>
	memset(&init_uart_param,0,sizeof(init_uart_param));
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	221c      	movs	r2, #28
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 fca4 	bl	8003efe <memset>
	memset(&uart_handle,0,sizeof(uart_handle));
 80005b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ba:	2240      	movs	r2, #64	; 0x40
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fc9d 	bl	8003efe <memset>
	//  Configure GPIO Pins as Alternate Functionality.
	init_gpio_uart.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005c4:	230c      	movs	r3, #12
 80005c6:	667b      	str	r3, [r7, #100]	; 0x64
	init_gpio_uart.Mode = GPIO_MODE_AF_PP;
 80005c8:	2302      	movs	r3, #2
 80005ca:	66bb      	str	r3, [r7, #104]	; 0x68
	init_gpio_uart.Alternate = (GPIO_AF7_USART2);
 80005cc:	2307      	movs	r3, #7
 80005ce:	677b      	str	r3, [r7, #116]	; 0x74
	HAL_GPIO_Init(GPIOA,&init_gpio_uart);
 80005d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005d4:	4619      	mov	r1, r3
 80005d6:	4813      	ldr	r0, [pc, #76]	; (8000624 <setupUART+0xc8>)
 80005d8:	f000 fae6 	bl	8000ba8 <HAL_GPIO_Init>

	//UART Parameter Initialization
	init_uart_param.BaudRate = 115200;
 80005dc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80005e0:	60bb      	str	r3, [r7, #8]
	init_uart_param.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
	init_uart_param.Mode = UART_MODE_TX_RX;
 80005e6:	230c      	movs	r3, #12
 80005e8:	61bb      	str	r3, [r7, #24]
	init_uart_param.Parity = UART_PARITY_NONE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
	init_uart_param.StopBits = UART_PARITY_NONE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
	init_uart_param.WordLength = UART_WORDLENGTH_8B;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]


	uart_handle.Init = init_uart_param;
 80005f6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80005fa:	f107 0508 	add.w	r5, r7, #8
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000606:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uart_handle.Instance = USART2;
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <setupUART+0xcc>)
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_UART_Init(&uart_handle);
 800060e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fd64 	bl	80010e0 <HAL_UART_Init>


}
 8000618:	bf00      	nop
 800061a:	3778      	adds	r7, #120	; 0x78
 800061c:	46bd      	mov	sp, r7
 800061e:	bdb0      	pop	{r4, r5, r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000
 8000628:	40004400 	.word	0x40004400

0800062c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a19      	ldr	r2, [pc, #100]	; (80006b0 <HAL_UART_MspInit+0x84>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d12b      	bne.n	80006a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <HAL_UART_MspInit+0x88>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <HAL_UART_MspInit+0x88>)
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	6413      	str	r3, [r2, #64]	; 0x40
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <HAL_UART_MspInit+0x88>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <HAL_UART_MspInit+0x88>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <HAL_UART_MspInit+0x88>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <HAL_UART_MspInit+0x88>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000686:	230c      	movs	r3, #12
 8000688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000692:	2303      	movs	r3, #3
 8000694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000696:	2307      	movs	r3, #7
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <HAL_UART_MspInit+0x8c>)
 80006a2:	f000 fa81 	bl	8000ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006a6:	bf00      	nop
 80006a8:	3728      	adds	r7, #40	; 0x28
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40004400 	.word	0x40004400
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40020000 	.word	0x40020000

080006bc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006c8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d013      	beq.n	80006fc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006d8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006dc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d00b      	beq.n	80006fc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006e4:	e000      	b.n	80006e8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80006e6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f9      	beq.n	80006e6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006f2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006fc:	687b      	ldr	r3, [r7, #4]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b086      	sub	sp, #24
 800070e:	af00      	add	r7, sp, #0
 8000710:	60f8      	str	r0, [r7, #12]
 8000712:	60b9      	str	r1, [r7, #8]
 8000714:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	e00a      	b.n	8000732 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800071c:	f3af 8000 	nop.w
 8000720:	4601      	mov	r1, r0
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1c5a      	adds	r2, r3, #1
 8000726:	60ba      	str	r2, [r7, #8]
 8000728:	b2ca      	uxtb	r2, r1
 800072a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	3301      	adds	r3, #1
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	429a      	cmp	r2, r3
 8000738:	dbf0      	blt.n	800071c <_read+0x12>
	}

return len;
 800073a:	687b      	ldr	r3, [r7, #4]
}
 800073c:	4618      	mov	r0, r3
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	e009      	b.n	800076a <_write+0x26>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	1c5a      	adds	r2, r3, #1
 800075a:	60ba      	str	r2, [r7, #8]
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ffac 	bl	80006bc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	3301      	adds	r3, #1
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	697a      	ldr	r2, [r7, #20]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	429a      	cmp	r2, r3
 8000770:	dbf1      	blt.n	8000756 <_write+0x12>
	}
	return len;
 8000772:	687b      	ldr	r3, [r7, #4]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <_close>:

int _close(int file)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	return -1;
 8000784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000788:	4618      	mov	r0, r3
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007a4:	605a      	str	r2, [r3, #4]
	return 0;
 80007a6:	2300      	movs	r3, #0
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <_isatty>:

int _isatty(int file)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	return 1;
 80007bc:	2301      	movs	r3, #1
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b085      	sub	sp, #20
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	60f8      	str	r0, [r7, #12]
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
	return 0;
 80007d6:	2300      	movs	r3, #0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b086      	sub	sp, #24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007ec:	4a14      	ldr	r2, [pc, #80]	; (8000840 <_sbrk+0x5c>)
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <_sbrk+0x60>)
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <_sbrk+0x64>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d102      	bne.n	8000806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <_sbrk+0x64>)
 8000802:	4a12      	ldr	r2, [pc, #72]	; (800084c <_sbrk+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <_sbrk+0x64>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	429a      	cmp	r2, r3
 8000812:	d207      	bcs.n	8000824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000814:	f003 fb3e 	bl	8003e94 <__errno>
 8000818:	4602      	mov	r2, r0
 800081a:	230c      	movs	r3, #12
 800081c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800081e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000822:	e009      	b.n	8000838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <_sbrk+0x64>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082a:	4b07      	ldr	r3, [pc, #28]	; (8000848 <_sbrk+0x64>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	4a05      	ldr	r2, [pc, #20]	; (8000848 <_sbrk+0x64>)
 8000834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000836:	68fb      	ldr	r3, [r7, #12]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20020000 	.word	0x20020000
 8000844:	00000400 	.word	0x00000400
 8000848:	2000009c 	.word	0x2000009c
 800084c:	20012e58 	.word	0x20012e58

08000850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <SystemInit+0x28>)
 8000856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085a:	4a07      	ldr	r2, [pc, #28]	; (8000878 <SystemInit+0x28>)
 800085c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <SystemInit+0x28>)
 8000866:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800086a:	609a      	str	r2, [r3, #8]
#endif
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800087c:	b480      	push	{r7}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	2302      	movs	r3, #2
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	2302      	movs	r3, #2
 8000894:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000896:	4b31      	ldr	r3, [pc, #196]	; (800095c <SystemCoreClockUpdate+0xe0>)
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	f003 030c 	and.w	r3, r3, #12
 800089e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	d007      	beq.n	80008b6 <SystemCoreClockUpdate+0x3a>
 80008a6:	2b08      	cmp	r3, #8
 80008a8:	d009      	beq.n	80008be <SystemCoreClockUpdate+0x42>
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d13d      	bne.n	800092a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80008ae:	4b2c      	ldr	r3, [pc, #176]	; (8000960 <SystemCoreClockUpdate+0xe4>)
 80008b0:	4a2c      	ldr	r2, [pc, #176]	; (8000964 <SystemCoreClockUpdate+0xe8>)
 80008b2:	601a      	str	r2, [r3, #0]
      break;
 80008b4:	e03d      	b.n	8000932 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80008b6:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <SystemCoreClockUpdate+0xe4>)
 80008b8:	4a2b      	ldr	r2, [pc, #172]	; (8000968 <SystemCoreClockUpdate+0xec>)
 80008ba:	601a      	str	r2, [r3, #0]
      break;
 80008bc:	e039      	b.n	8000932 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80008be:	4b27      	ldr	r3, [pc, #156]	; (800095c <SystemCoreClockUpdate+0xe0>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	0d9b      	lsrs	r3, r3, #22
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80008ca:	4b24      	ldr	r3, [pc, #144]	; (800095c <SystemCoreClockUpdate+0xe0>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008d2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00c      	beq.n	80008f4 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80008da:	4a23      	ldr	r2, [pc, #140]	; (8000968 <SystemCoreClockUpdate+0xec>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	4a1e      	ldr	r2, [pc, #120]	; (800095c <SystemCoreClockUpdate+0xe0>)
 80008e4:	6852      	ldr	r2, [r2, #4]
 80008e6:	0992      	lsrs	r2, r2, #6
 80008e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80008ec:	fb02 f303 	mul.w	r3, r2, r3
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	e00b      	b.n	800090c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80008f4:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <SystemCoreClockUpdate+0xe8>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fc:	4a17      	ldr	r2, [pc, #92]	; (800095c <SystemCoreClockUpdate+0xe0>)
 80008fe:	6852      	ldr	r2, [r2, #4]
 8000900:	0992      	lsrs	r2, r2, #6
 8000902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000906:	fb02 f303 	mul.w	r3, r2, r3
 800090a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <SystemCoreClockUpdate+0xe0>)
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	0c1b      	lsrs	r3, r3, #16
 8000912:	f003 0303 	and.w	r3, r3, #3
 8000916:	3301      	adds	r3, #1
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800091c:	697a      	ldr	r2, [r7, #20]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	fbb2 f3f3 	udiv	r3, r2, r3
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <SystemCoreClockUpdate+0xe4>)
 8000926:	6013      	str	r3, [r2, #0]
      break;
 8000928:	e003      	b.n	8000932 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <SystemCoreClockUpdate+0xe4>)
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <SystemCoreClockUpdate+0xe8>)
 800092e:	601a      	str	r2, [r3, #0]
      break;
 8000930:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <SystemCoreClockUpdate+0xe0>)
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	091b      	lsrs	r3, r3, #4
 8000938:	f003 030f 	and.w	r3, r3, #15
 800093c:	4a0b      	ldr	r2, [pc, #44]	; (800096c <SystemCoreClockUpdate+0xf0>)
 800093e:	5cd3      	ldrb	r3, [r2, r3]
 8000940:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <SystemCoreClockUpdate+0xe4>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	fa22 f303 	lsr.w	r3, r2, r3
 800094c:	4a04      	ldr	r2, [pc, #16]	; (8000960 <SystemCoreClockUpdate+0xe4>)
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	bf00      	nop
 8000952:	371c      	adds	r7, #28
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	40023800 	.word	0x40023800
 8000960:	20000000 	.word	0x20000000
 8000964:	00f42400 	.word	0x00f42400
 8000968:	007a1200 	.word	0x007a1200
 800096c:	08004830 	.word	0x08004830

08000970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000974:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000976:	e003      	b.n	8000980 <LoopCopyDataInit>

08000978 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800097a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800097c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800097e:	3104      	adds	r1, #4

08000980 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000980:	480b      	ldr	r0, [pc, #44]	; (80009b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000984:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000986:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000988:	d3f6      	bcc.n	8000978 <CopyDataInit>
  ldr  r2, =_sbss
 800098a:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800098c:	e002      	b.n	8000994 <LoopFillZerobss>

0800098e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800098e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000990:	f842 3b04 	str.w	r3, [r2], #4

08000994 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000996:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000998:	d3f9      	bcc.n	800098e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800099a:	f7ff ff59 	bl	8000850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800099e:	f003 fa7f 	bl	8003ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009a2:	f7ff fd95 	bl	80004d0 <main>
  bx  lr    
 80009a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009ac:	080048bc 	.word	0x080048bc
  ldr  r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009b4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80009b8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80009bc:	20012e58 	.word	0x20012e58

080009c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC_IRQHandler>
	...

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x54>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0x58>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f8d4 	bl	8000b90 <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00e      	b.n	8000a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d80a      	bhi.n	8000a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a00:	f000 f8aa 	bl	8000b58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <HAL_InitTick+0x5c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e000      	b.n	8000a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <HAL_GetTick+0x14>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20012e10 	.word	0x20012e10

08000a3c <__NVIC_GetPriorityGrouping>:
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_SetPriority>:
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	; 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <SysTick_Config>:
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b24:	d301      	bcc.n	8000b2a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00f      	b.n	8000b4a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <SysTick_Config+0x40>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b32:	210f      	movs	r1, #15
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b38:	f7ff ff8e 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <SysTick_Config+0x40>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SysTick_Config+0x40>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b6a:	f7ff ff67 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000b6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	68b9      	ldr	r1, [r7, #8]
 8000b74:	6978      	ldr	r0, [r7, #20]
 8000b76:	f7ff ff99 	bl	8000aac <NVIC_EncodePriority>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff ff68 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b88:	bf00      	nop
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ffbb 	bl	8000b14 <SysTick_Config>
 8000b9e:	4603      	mov	r3, r0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
 8000bc2:	e16b      	b.n	8000e9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	f040 815a 	bne.w	8000e96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d00b      	beq.n	8000c02 <HAL_GPIO_Init+0x5a>
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d007      	beq.n	8000c02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bf6:	2b11      	cmp	r3, #17
 8000bf8:	d003      	beq.n	8000c02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2b12      	cmp	r3, #18
 8000c00:	d130      	bne.n	8000c64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4013      	ands	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	68da      	ldr	r2, [r3, #12]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c38:	2201      	movs	r2, #1
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	091b      	lsrs	r3, r3, #4
 8000c4e:	f003 0201 	and.w	r2, r3, #1
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	2203      	movs	r2, #3
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0xfc>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b12      	cmp	r3, #18
 8000ca2:	d123      	bne.n	8000cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	08da      	lsrs	r2, r3, #3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3208      	adds	r2, #8
 8000cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	f003 0307 	and.w	r3, r3, #7
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	220f      	movs	r2, #15
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	691a      	ldr	r2, [r3, #16]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	08da      	lsrs	r2, r3, #3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3208      	adds	r2, #8
 8000ce6:	69b9      	ldr	r1, [r7, #24]
 8000ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0203 	and.w	r2, r3, #3
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f000 80b4 	beq.w	8000e96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b5f      	ldr	r3, [pc, #380]	; (8000eb0 <HAL_GPIO_Init+0x308>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a5e      	ldr	r2, [pc, #376]	; (8000eb0 <HAL_GPIO_Init+0x308>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <HAL_GPIO_Init+0x308>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d4a:	4a5a      	ldr	r2, [pc, #360]	; (8000eb4 <HAL_GPIO_Init+0x30c>)
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3302      	adds	r3, #2
 8000d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f003 0303 	and.w	r3, r3, #3
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	220f      	movs	r2, #15
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a51      	ldr	r2, [pc, #324]	; (8000eb8 <HAL_GPIO_Init+0x310>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d02b      	beq.n	8000dce <HAL_GPIO_Init+0x226>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a50      	ldr	r2, [pc, #320]	; (8000ebc <HAL_GPIO_Init+0x314>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d025      	beq.n	8000dca <HAL_GPIO_Init+0x222>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4f      	ldr	r2, [pc, #316]	; (8000ec0 <HAL_GPIO_Init+0x318>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d01f      	beq.n	8000dc6 <HAL_GPIO_Init+0x21e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a4e      	ldr	r2, [pc, #312]	; (8000ec4 <HAL_GPIO_Init+0x31c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d019      	beq.n	8000dc2 <HAL_GPIO_Init+0x21a>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4d      	ldr	r2, [pc, #308]	; (8000ec8 <HAL_GPIO_Init+0x320>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d013      	beq.n	8000dbe <HAL_GPIO_Init+0x216>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a4c      	ldr	r2, [pc, #304]	; (8000ecc <HAL_GPIO_Init+0x324>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d00d      	beq.n	8000dba <HAL_GPIO_Init+0x212>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4b      	ldr	r2, [pc, #300]	; (8000ed0 <HAL_GPIO_Init+0x328>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d007      	beq.n	8000db6 <HAL_GPIO_Init+0x20e>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4a      	ldr	r2, [pc, #296]	; (8000ed4 <HAL_GPIO_Init+0x32c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d101      	bne.n	8000db2 <HAL_GPIO_Init+0x20a>
 8000dae:	2307      	movs	r3, #7
 8000db0:	e00e      	b.n	8000dd0 <HAL_GPIO_Init+0x228>
 8000db2:	2308      	movs	r3, #8
 8000db4:	e00c      	b.n	8000dd0 <HAL_GPIO_Init+0x228>
 8000db6:	2306      	movs	r3, #6
 8000db8:	e00a      	b.n	8000dd0 <HAL_GPIO_Init+0x228>
 8000dba:	2305      	movs	r3, #5
 8000dbc:	e008      	b.n	8000dd0 <HAL_GPIO_Init+0x228>
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	e006      	b.n	8000dd0 <HAL_GPIO_Init+0x228>
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e004      	b.n	8000dd0 <HAL_GPIO_Init+0x228>
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	e002      	b.n	8000dd0 <HAL_GPIO_Init+0x228>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e000      	b.n	8000dd0 <HAL_GPIO_Init+0x228>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	69fa      	ldr	r2, [r7, #28]
 8000dd2:	f002 0203 	and.w	r2, r2, #3
 8000dd6:	0092      	lsls	r2, r2, #2
 8000dd8:	4093      	lsls	r3, r2
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de0:	4934      	ldr	r1, [pc, #208]	; (8000eb4 <HAL_GPIO_Init+0x30c>)
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	3302      	adds	r3, #2
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dee:	4b3a      	ldr	r3, [pc, #232]	; (8000ed8 <HAL_GPIO_Init+0x330>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e12:	4a31      	ldr	r2, [pc, #196]	; (8000ed8 <HAL_GPIO_Init+0x330>)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e18:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <HAL_GPIO_Init+0x330>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e3c:	4a26      	ldr	r2, [pc, #152]	; (8000ed8 <HAL_GPIO_Init+0x330>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e42:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <HAL_GPIO_Init+0x330>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e66:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <HAL_GPIO_Init+0x330>)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <HAL_GPIO_Init+0x330>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e90:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <HAL_GPIO_Init+0x330>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	2b0f      	cmp	r3, #15
 8000ea0:	f67f ae90 	bls.w	8000bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	3724      	adds	r7, #36	; 0x24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40013800 	.word	0x40013800
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	40020c00 	.word	0x40020c00
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40021400 	.word	0x40021400
 8000ed0:	40021800 	.word	0x40021800
 8000ed4:	40021c00 	.word	0x40021c00
 8000ed8:	40013c00 	.word	0x40013c00

08000edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000000 	.word	0x20000000

08000ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ef8:	f7ff fff0 	bl	8000edc <HAL_RCC_GetHCLKFreq>
 8000efc:	4601      	mov	r1, r0
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	0a9b      	lsrs	r3, r3, #10
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f0a:	5cd3      	ldrb	r3, [r2, r3]
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40023800 	.word	0x40023800
 8000f18:	08004840 	.word	0x08004840

08000f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000f20:	f7ff ffdc 	bl	8000edc <HAL_RCC_GetHCLKFreq>
 8000f24:	4601      	mov	r1, r0
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	0b5b      	lsrs	r3, r3, #13
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	4a03      	ldr	r2, [pc, #12]	; (8000f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f32:	5cd3      	ldrb	r3, [r2, r3]
 8000f34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	08004840 	.word	0x08004840

08000f44 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000f4a:	f7ff fd6b 	bl	8000a24 <HAL_GetTick>
 8000f4e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000f50:	4b5d      	ldr	r3, [pc, #372]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a5c      	ldr	r2, [pc, #368]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f5e:	f7ff fd61 	bl	8000a24 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e0a7      	b.n	80010c0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000f70:	4b55      	ldr	r3, [pc, #340]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f0      	beq.n	8000f5e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8000f7c:	4b52      	ldr	r3, [pc, #328]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a51      	ldr	r2, [pc, #324]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8000f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f86:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000f88:	f7ff fd4c 	bl	8000a24 <HAL_GetTick>
 8000f8c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8000f8e:	4b4e      	ldr	r3, [pc, #312]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000f94:	e00a      	b.n	8000fac <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f96:	f7ff fd45 	bl	8000a24 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e089      	b.n	80010c0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8000fac:	4b46      	ldr	r3, [pc, #280]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 030c 	and.w	r3, r3, #12
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1ee      	bne.n	8000f96 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000fb8:	f7ff fd34 	bl	8000a24 <HAL_GetTick>
 8000fbc:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8000fbe:	4b42      	ldr	r3, [pc, #264]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a41      	ldr	r2, [pc, #260]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8000fc4:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8000fc8:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fd2a 	bl	8000a24 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	; 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e070      	b.n	80010c0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000fde:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f0      	bne.n	8000fcc <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8000fea:	f7ff fd1b 	bl	8000a24 <HAL_GetTick>
 8000fee:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000ff0:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a34      	ldr	r2, [pc, #208]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8000ff6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ffa:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ffe:	f7ff fd11 	bl	8000a24 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e057      	b.n	80010c0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001010:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f0      	bne.n	8000ffe <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800101c:	f7ff fd02 	bl	8000a24 <HAL_GetTick>
 8001020:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8001022:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8001028:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800102c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001030:	f7ff fcf8 	bl	8000a24 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e03e      	b.n	80010c0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f0      	bne.n	8001030 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 800104e:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8001050:	4a1e      	ldr	r2, [pc, #120]	; (80010cc <HAL_RCC_DeInit+0x188>)
 8001052:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <HAL_RCC_DeInit+0x18c>)
 8001058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8001062:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001066:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	4a16      	ldr	r2, [pc, #88]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 800106e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001072:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 800107a:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 800107e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8001086:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800108a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 800108e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 8001092:	f023 0301 	bic.w	r3, r3, #1
 8001096:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 800109a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800109c:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <HAL_RCC_DeInit+0x184>)
 800109e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010a2:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_RCC_DeInit+0x190>)
 80010a6:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <HAL_RCC_DeInit+0x194>)
 80010a8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_RCC_DeInit+0x198>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fc88 	bl	80009c4 <HAL_InitTick>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80010be:	2300      	movs	r3, #0
  }
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40023800 	.word	0x40023800
 80010cc:	04003010 	.word	0x04003010
 80010d0:	20003000 	.word	0x20003000
 80010d4:	20000000 	.word	0x20000000
 80010d8:	00f42400 	.word	0x00f42400
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e03f      	b.n	8001172 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d106      	bne.n	800110c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff fa90 	bl	800062c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2224      	movs	r2, #36	; 0x24
 8001110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001122:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 f829 	bl	800117c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001138:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	695a      	ldr	r2, [r3, #20]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001148:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001158:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2220      	movs	r2, #32
 8001164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2220      	movs	r2, #32
 800116c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001180:	b085      	sub	sp, #20
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	430a      	orrs	r2, r1
 800119a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	431a      	orrs	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80011be:	f023 030c 	bic.w	r3, r3, #12
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	68f9      	ldr	r1, [r7, #12]
 80011c8:	430b      	orrs	r3, r1
 80011ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	699a      	ldr	r2, [r3, #24]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	430a      	orrs	r2, r1
 80011e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011ea:	f040 818b 	bne.w	8001504 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4ac1      	ldr	r2, [pc, #772]	; (80014f8 <UART_SetConfig+0x37c>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d005      	beq.n	8001204 <UART_SetConfig+0x88>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4abf      	ldr	r2, [pc, #764]	; (80014fc <UART_SetConfig+0x380>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	f040 80bd 	bne.w	800137e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001204:	f7ff fe8a 	bl	8000f1c <HAL_RCC_GetPCLK2Freq>
 8001208:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	461d      	mov	r5, r3
 800120e:	f04f 0600 	mov.w	r6, #0
 8001212:	46a8      	mov	r8, r5
 8001214:	46b1      	mov	r9, r6
 8001216:	eb18 0308 	adds.w	r3, r8, r8
 800121a:	eb49 0409 	adc.w	r4, r9, r9
 800121e:	4698      	mov	r8, r3
 8001220:	46a1      	mov	r9, r4
 8001222:	eb18 0805 	adds.w	r8, r8, r5
 8001226:	eb49 0906 	adc.w	r9, r9, r6
 800122a:	f04f 0100 	mov.w	r1, #0
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001236:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800123a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800123e:	4688      	mov	r8, r1
 8001240:	4691      	mov	r9, r2
 8001242:	eb18 0005 	adds.w	r0, r8, r5
 8001246:	eb49 0106 	adc.w	r1, r9, r6
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	461d      	mov	r5, r3
 8001250:	f04f 0600 	mov.w	r6, #0
 8001254:	196b      	adds	r3, r5, r5
 8001256:	eb46 0406 	adc.w	r4, r6, r6
 800125a:	461a      	mov	r2, r3
 800125c:	4623      	mov	r3, r4
 800125e:	f7fe ffb7 	bl	80001d0 <__aeabi_uldivmod>
 8001262:	4603      	mov	r3, r0
 8001264:	460c      	mov	r4, r1
 8001266:	461a      	mov	r2, r3
 8001268:	4ba5      	ldr	r3, [pc, #660]	; (8001500 <UART_SetConfig+0x384>)
 800126a:	fba3 2302 	umull	r2, r3, r3, r2
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	461d      	mov	r5, r3
 8001278:	f04f 0600 	mov.w	r6, #0
 800127c:	46a9      	mov	r9, r5
 800127e:	46b2      	mov	sl, r6
 8001280:	eb19 0309 	adds.w	r3, r9, r9
 8001284:	eb4a 040a 	adc.w	r4, sl, sl
 8001288:	4699      	mov	r9, r3
 800128a:	46a2      	mov	sl, r4
 800128c:	eb19 0905 	adds.w	r9, r9, r5
 8001290:	eb4a 0a06 	adc.w	sl, sl, r6
 8001294:	f04f 0100 	mov.w	r1, #0
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80012a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80012a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80012a8:	4689      	mov	r9, r1
 80012aa:	4692      	mov	sl, r2
 80012ac:	eb19 0005 	adds.w	r0, r9, r5
 80012b0:	eb4a 0106 	adc.w	r1, sl, r6
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	461d      	mov	r5, r3
 80012ba:	f04f 0600 	mov.w	r6, #0
 80012be:	196b      	adds	r3, r5, r5
 80012c0:	eb46 0406 	adc.w	r4, r6, r6
 80012c4:	461a      	mov	r2, r3
 80012c6:	4623      	mov	r3, r4
 80012c8:	f7fe ff82 	bl	80001d0 <__aeabi_uldivmod>
 80012cc:	4603      	mov	r3, r0
 80012ce:	460c      	mov	r4, r1
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b8b      	ldr	r3, [pc, #556]	; (8001500 <UART_SetConfig+0x384>)
 80012d4:	fba3 1302 	umull	r1, r3, r3, r2
 80012d8:	095b      	lsrs	r3, r3, #5
 80012da:	2164      	movs	r1, #100	; 0x64
 80012dc:	fb01 f303 	mul.w	r3, r1, r3
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	3332      	adds	r3, #50	; 0x32
 80012e6:	4a86      	ldr	r2, [pc, #536]	; (8001500 <UART_SetConfig+0x384>)
 80012e8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ec:	095b      	lsrs	r3, r3, #5
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80012f4:	4498      	add	r8, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	461d      	mov	r5, r3
 80012fa:	f04f 0600 	mov.w	r6, #0
 80012fe:	46a9      	mov	r9, r5
 8001300:	46b2      	mov	sl, r6
 8001302:	eb19 0309 	adds.w	r3, r9, r9
 8001306:	eb4a 040a 	adc.w	r4, sl, sl
 800130a:	4699      	mov	r9, r3
 800130c:	46a2      	mov	sl, r4
 800130e:	eb19 0905 	adds.w	r9, r9, r5
 8001312:	eb4a 0a06 	adc.w	sl, sl, r6
 8001316:	f04f 0100 	mov.w	r1, #0
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001322:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001326:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800132a:	4689      	mov	r9, r1
 800132c:	4692      	mov	sl, r2
 800132e:	eb19 0005 	adds.w	r0, r9, r5
 8001332:	eb4a 0106 	adc.w	r1, sl, r6
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	461d      	mov	r5, r3
 800133c:	f04f 0600 	mov.w	r6, #0
 8001340:	196b      	adds	r3, r5, r5
 8001342:	eb46 0406 	adc.w	r4, r6, r6
 8001346:	461a      	mov	r2, r3
 8001348:	4623      	mov	r3, r4
 800134a:	f7fe ff41 	bl	80001d0 <__aeabi_uldivmod>
 800134e:	4603      	mov	r3, r0
 8001350:	460c      	mov	r4, r1
 8001352:	461a      	mov	r2, r3
 8001354:	4b6a      	ldr	r3, [pc, #424]	; (8001500 <UART_SetConfig+0x384>)
 8001356:	fba3 1302 	umull	r1, r3, r3, r2
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2164      	movs	r1, #100	; 0x64
 800135e:	fb01 f303 	mul.w	r3, r1, r3
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	3332      	adds	r3, #50	; 0x32
 8001368:	4a65      	ldr	r2, [pc, #404]	; (8001500 <UART_SetConfig+0x384>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	f003 0207 	and.w	r2, r3, #7
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4442      	add	r2, r8
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	e26f      	b.n	800185e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800137e:	f7ff fdb9 	bl	8000ef4 <HAL_RCC_GetPCLK1Freq>
 8001382:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	461d      	mov	r5, r3
 8001388:	f04f 0600 	mov.w	r6, #0
 800138c:	46a8      	mov	r8, r5
 800138e:	46b1      	mov	r9, r6
 8001390:	eb18 0308 	adds.w	r3, r8, r8
 8001394:	eb49 0409 	adc.w	r4, r9, r9
 8001398:	4698      	mov	r8, r3
 800139a:	46a1      	mov	r9, r4
 800139c:	eb18 0805 	adds.w	r8, r8, r5
 80013a0:	eb49 0906 	adc.w	r9, r9, r6
 80013a4:	f04f 0100 	mov.w	r1, #0
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80013b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80013b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80013b8:	4688      	mov	r8, r1
 80013ba:	4691      	mov	r9, r2
 80013bc:	eb18 0005 	adds.w	r0, r8, r5
 80013c0:	eb49 0106 	adc.w	r1, r9, r6
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	461d      	mov	r5, r3
 80013ca:	f04f 0600 	mov.w	r6, #0
 80013ce:	196b      	adds	r3, r5, r5
 80013d0:	eb46 0406 	adc.w	r4, r6, r6
 80013d4:	461a      	mov	r2, r3
 80013d6:	4623      	mov	r3, r4
 80013d8:	f7fe fefa 	bl	80001d0 <__aeabi_uldivmod>
 80013dc:	4603      	mov	r3, r0
 80013de:	460c      	mov	r4, r1
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b47      	ldr	r3, [pc, #284]	; (8001500 <UART_SetConfig+0x384>)
 80013e4:	fba3 2302 	umull	r2, r3, r3, r2
 80013e8:	095b      	lsrs	r3, r3, #5
 80013ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	461d      	mov	r5, r3
 80013f2:	f04f 0600 	mov.w	r6, #0
 80013f6:	46a9      	mov	r9, r5
 80013f8:	46b2      	mov	sl, r6
 80013fa:	eb19 0309 	adds.w	r3, r9, r9
 80013fe:	eb4a 040a 	adc.w	r4, sl, sl
 8001402:	4699      	mov	r9, r3
 8001404:	46a2      	mov	sl, r4
 8001406:	eb19 0905 	adds.w	r9, r9, r5
 800140a:	eb4a 0a06 	adc.w	sl, sl, r6
 800140e:	f04f 0100 	mov.w	r1, #0
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800141a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800141e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001422:	4689      	mov	r9, r1
 8001424:	4692      	mov	sl, r2
 8001426:	eb19 0005 	adds.w	r0, r9, r5
 800142a:	eb4a 0106 	adc.w	r1, sl, r6
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	461d      	mov	r5, r3
 8001434:	f04f 0600 	mov.w	r6, #0
 8001438:	196b      	adds	r3, r5, r5
 800143a:	eb46 0406 	adc.w	r4, r6, r6
 800143e:	461a      	mov	r2, r3
 8001440:	4623      	mov	r3, r4
 8001442:	f7fe fec5 	bl	80001d0 <__aeabi_uldivmod>
 8001446:	4603      	mov	r3, r0
 8001448:	460c      	mov	r4, r1
 800144a:	461a      	mov	r2, r3
 800144c:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <UART_SetConfig+0x384>)
 800144e:	fba3 1302 	umull	r1, r3, r3, r2
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	2164      	movs	r1, #100	; 0x64
 8001456:	fb01 f303 	mul.w	r3, r1, r3
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	3332      	adds	r3, #50	; 0x32
 8001460:	4a27      	ldr	r2, [pc, #156]	; (8001500 <UART_SetConfig+0x384>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800146e:	4498      	add	r8, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	461d      	mov	r5, r3
 8001474:	f04f 0600 	mov.w	r6, #0
 8001478:	46a9      	mov	r9, r5
 800147a:	46b2      	mov	sl, r6
 800147c:	eb19 0309 	adds.w	r3, r9, r9
 8001480:	eb4a 040a 	adc.w	r4, sl, sl
 8001484:	4699      	mov	r9, r3
 8001486:	46a2      	mov	sl, r4
 8001488:	eb19 0905 	adds.w	r9, r9, r5
 800148c:	eb4a 0a06 	adc.w	sl, sl, r6
 8001490:	f04f 0100 	mov.w	r1, #0
 8001494:	f04f 0200 	mov.w	r2, #0
 8001498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800149c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80014a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80014a4:	4689      	mov	r9, r1
 80014a6:	4692      	mov	sl, r2
 80014a8:	eb19 0005 	adds.w	r0, r9, r5
 80014ac:	eb4a 0106 	adc.w	r1, sl, r6
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	461d      	mov	r5, r3
 80014b6:	f04f 0600 	mov.w	r6, #0
 80014ba:	196b      	adds	r3, r5, r5
 80014bc:	eb46 0406 	adc.w	r4, r6, r6
 80014c0:	461a      	mov	r2, r3
 80014c2:	4623      	mov	r3, r4
 80014c4:	f7fe fe84 	bl	80001d0 <__aeabi_uldivmod>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <UART_SetConfig+0x384>)
 80014d0:	fba3 1302 	umull	r1, r3, r3, r2
 80014d4:	095b      	lsrs	r3, r3, #5
 80014d6:	2164      	movs	r1, #100	; 0x64
 80014d8:	fb01 f303 	mul.w	r3, r1, r3
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	3332      	adds	r3, #50	; 0x32
 80014e2:	4a07      	ldr	r2, [pc, #28]	; (8001500 <UART_SetConfig+0x384>)
 80014e4:	fba2 2303 	umull	r2, r3, r2, r3
 80014e8:	095b      	lsrs	r3, r3, #5
 80014ea:	f003 0207 	and.w	r2, r3, #7
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4442      	add	r2, r8
 80014f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80014f6:	e1b2      	b.n	800185e <UART_SetConfig+0x6e2>
 80014f8:	40011000 	.word	0x40011000
 80014fc:	40011400 	.word	0x40011400
 8001500:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4ad7      	ldr	r2, [pc, #860]	; (8001868 <UART_SetConfig+0x6ec>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d005      	beq.n	800151a <UART_SetConfig+0x39e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4ad6      	ldr	r2, [pc, #856]	; (800186c <UART_SetConfig+0x6f0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	f040 80d1 	bne.w	80016bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800151a:	f7ff fcff 	bl	8000f1c <HAL_RCC_GetPCLK2Freq>
 800151e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	469a      	mov	sl, r3
 8001524:	f04f 0b00 	mov.w	fp, #0
 8001528:	46d0      	mov	r8, sl
 800152a:	46d9      	mov	r9, fp
 800152c:	eb18 0308 	adds.w	r3, r8, r8
 8001530:	eb49 0409 	adc.w	r4, r9, r9
 8001534:	4698      	mov	r8, r3
 8001536:	46a1      	mov	r9, r4
 8001538:	eb18 080a 	adds.w	r8, r8, sl
 800153c:	eb49 090b 	adc.w	r9, r9, fp
 8001540:	f04f 0100 	mov.w	r1, #0
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800154c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001550:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001554:	4688      	mov	r8, r1
 8001556:	4691      	mov	r9, r2
 8001558:	eb1a 0508 	adds.w	r5, sl, r8
 800155c:	eb4b 0609 	adc.w	r6, fp, r9
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4619      	mov	r1, r3
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	f04f 0400 	mov.w	r4, #0
 8001572:	0094      	lsls	r4, r2, #2
 8001574:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001578:	008b      	lsls	r3, r1, #2
 800157a:	461a      	mov	r2, r3
 800157c:	4623      	mov	r3, r4
 800157e:	4628      	mov	r0, r5
 8001580:	4631      	mov	r1, r6
 8001582:	f7fe fe25 	bl	80001d0 <__aeabi_uldivmod>
 8001586:	4603      	mov	r3, r0
 8001588:	460c      	mov	r4, r1
 800158a:	461a      	mov	r2, r3
 800158c:	4bb8      	ldr	r3, [pc, #736]	; (8001870 <UART_SetConfig+0x6f4>)
 800158e:	fba3 2302 	umull	r2, r3, r3, r2
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	469b      	mov	fp, r3
 800159c:	f04f 0c00 	mov.w	ip, #0
 80015a0:	46d9      	mov	r9, fp
 80015a2:	46e2      	mov	sl, ip
 80015a4:	eb19 0309 	adds.w	r3, r9, r9
 80015a8:	eb4a 040a 	adc.w	r4, sl, sl
 80015ac:	4699      	mov	r9, r3
 80015ae:	46a2      	mov	sl, r4
 80015b0:	eb19 090b 	adds.w	r9, r9, fp
 80015b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80015b8:	f04f 0100 	mov.w	r1, #0
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80015c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80015cc:	4689      	mov	r9, r1
 80015ce:	4692      	mov	sl, r2
 80015d0:	eb1b 0509 	adds.w	r5, fp, r9
 80015d4:	eb4c 060a 	adc.w	r6, ip, sl
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	4619      	mov	r1, r3
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	f04f 0400 	mov.w	r4, #0
 80015ea:	0094      	lsls	r4, r2, #2
 80015ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80015f0:	008b      	lsls	r3, r1, #2
 80015f2:	461a      	mov	r2, r3
 80015f4:	4623      	mov	r3, r4
 80015f6:	4628      	mov	r0, r5
 80015f8:	4631      	mov	r1, r6
 80015fa:	f7fe fde9 	bl	80001d0 <__aeabi_uldivmod>
 80015fe:	4603      	mov	r3, r0
 8001600:	460c      	mov	r4, r1
 8001602:	461a      	mov	r2, r3
 8001604:	4b9a      	ldr	r3, [pc, #616]	; (8001870 <UART_SetConfig+0x6f4>)
 8001606:	fba3 1302 	umull	r1, r3, r3, r2
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	2164      	movs	r1, #100	; 0x64
 800160e:	fb01 f303 	mul.w	r3, r1, r3
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	3332      	adds	r3, #50	; 0x32
 8001618:	4a95      	ldr	r2, [pc, #596]	; (8001870 <UART_SetConfig+0x6f4>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001624:	4498      	add	r8, r3
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	469b      	mov	fp, r3
 800162a:	f04f 0c00 	mov.w	ip, #0
 800162e:	46d9      	mov	r9, fp
 8001630:	46e2      	mov	sl, ip
 8001632:	eb19 0309 	adds.w	r3, r9, r9
 8001636:	eb4a 040a 	adc.w	r4, sl, sl
 800163a:	4699      	mov	r9, r3
 800163c:	46a2      	mov	sl, r4
 800163e:	eb19 090b 	adds.w	r9, r9, fp
 8001642:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001652:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001656:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800165a:	4689      	mov	r9, r1
 800165c:	4692      	mov	sl, r2
 800165e:	eb1b 0509 	adds.w	r5, fp, r9
 8001662:	eb4c 060a 	adc.w	r6, ip, sl
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4619      	mov	r1, r3
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	f04f 0400 	mov.w	r4, #0
 8001678:	0094      	lsls	r4, r2, #2
 800167a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800167e:	008b      	lsls	r3, r1, #2
 8001680:	461a      	mov	r2, r3
 8001682:	4623      	mov	r3, r4
 8001684:	4628      	mov	r0, r5
 8001686:	4631      	mov	r1, r6
 8001688:	f7fe fda2 	bl	80001d0 <__aeabi_uldivmod>
 800168c:	4603      	mov	r3, r0
 800168e:	460c      	mov	r4, r1
 8001690:	461a      	mov	r2, r3
 8001692:	4b77      	ldr	r3, [pc, #476]	; (8001870 <UART_SetConfig+0x6f4>)
 8001694:	fba3 1302 	umull	r1, r3, r3, r2
 8001698:	095b      	lsrs	r3, r3, #5
 800169a:	2164      	movs	r1, #100	; 0x64
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	3332      	adds	r3, #50	; 0x32
 80016a6:	4a72      	ldr	r2, [pc, #456]	; (8001870 <UART_SetConfig+0x6f4>)
 80016a8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ac:	095b      	lsrs	r3, r3, #5
 80016ae:	f003 020f 	and.w	r2, r3, #15
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4442      	add	r2, r8
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	e0d0      	b.n	800185e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80016bc:	f7ff fc1a 	bl	8000ef4 <HAL_RCC_GetPCLK1Freq>
 80016c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	469a      	mov	sl, r3
 80016c6:	f04f 0b00 	mov.w	fp, #0
 80016ca:	46d0      	mov	r8, sl
 80016cc:	46d9      	mov	r9, fp
 80016ce:	eb18 0308 	adds.w	r3, r8, r8
 80016d2:	eb49 0409 	adc.w	r4, r9, r9
 80016d6:	4698      	mov	r8, r3
 80016d8:	46a1      	mov	r9, r4
 80016da:	eb18 080a 	adds.w	r8, r8, sl
 80016de:	eb49 090b 	adc.w	r9, r9, fp
 80016e2:	f04f 0100 	mov.w	r1, #0
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80016ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80016f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80016f6:	4688      	mov	r8, r1
 80016f8:	4691      	mov	r9, r2
 80016fa:	eb1a 0508 	adds.w	r5, sl, r8
 80016fe:	eb4b 0609 	adc.w	r6, fp, r9
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	4619      	mov	r1, r3
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	f04f 0300 	mov.w	r3, #0
 8001710:	f04f 0400 	mov.w	r4, #0
 8001714:	0094      	lsls	r4, r2, #2
 8001716:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800171a:	008b      	lsls	r3, r1, #2
 800171c:	461a      	mov	r2, r3
 800171e:	4623      	mov	r3, r4
 8001720:	4628      	mov	r0, r5
 8001722:	4631      	mov	r1, r6
 8001724:	f7fe fd54 	bl	80001d0 <__aeabi_uldivmod>
 8001728:	4603      	mov	r3, r0
 800172a:	460c      	mov	r4, r1
 800172c:	461a      	mov	r2, r3
 800172e:	4b50      	ldr	r3, [pc, #320]	; (8001870 <UART_SetConfig+0x6f4>)
 8001730:	fba3 2302 	umull	r2, r3, r3, r2
 8001734:	095b      	lsrs	r3, r3, #5
 8001736:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	469b      	mov	fp, r3
 800173e:	f04f 0c00 	mov.w	ip, #0
 8001742:	46d9      	mov	r9, fp
 8001744:	46e2      	mov	sl, ip
 8001746:	eb19 0309 	adds.w	r3, r9, r9
 800174a:	eb4a 040a 	adc.w	r4, sl, sl
 800174e:	4699      	mov	r9, r3
 8001750:	46a2      	mov	sl, r4
 8001752:	eb19 090b 	adds.w	r9, r9, fp
 8001756:	eb4a 0a0c 	adc.w	sl, sl, ip
 800175a:	f04f 0100 	mov.w	r1, #0
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001766:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800176a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800176e:	4689      	mov	r9, r1
 8001770:	4692      	mov	sl, r2
 8001772:	eb1b 0509 	adds.w	r5, fp, r9
 8001776:	eb4c 060a 	adc.w	r6, ip, sl
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	4619      	mov	r1, r3
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	f04f 0400 	mov.w	r4, #0
 800178c:	0094      	lsls	r4, r2, #2
 800178e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001792:	008b      	lsls	r3, r1, #2
 8001794:	461a      	mov	r2, r3
 8001796:	4623      	mov	r3, r4
 8001798:	4628      	mov	r0, r5
 800179a:	4631      	mov	r1, r6
 800179c:	f7fe fd18 	bl	80001d0 <__aeabi_uldivmod>
 80017a0:	4603      	mov	r3, r0
 80017a2:	460c      	mov	r4, r1
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b32      	ldr	r3, [pc, #200]	; (8001870 <UART_SetConfig+0x6f4>)
 80017a8:	fba3 1302 	umull	r1, r3, r3, r2
 80017ac:	095b      	lsrs	r3, r3, #5
 80017ae:	2164      	movs	r1, #100	; 0x64
 80017b0:	fb01 f303 	mul.w	r3, r1, r3
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	3332      	adds	r3, #50	; 0x32
 80017ba:	4a2d      	ldr	r2, [pc, #180]	; (8001870 <UART_SetConfig+0x6f4>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	095b      	lsrs	r3, r3, #5
 80017c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017c6:	4498      	add	r8, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	469b      	mov	fp, r3
 80017cc:	f04f 0c00 	mov.w	ip, #0
 80017d0:	46d9      	mov	r9, fp
 80017d2:	46e2      	mov	sl, ip
 80017d4:	eb19 0309 	adds.w	r3, r9, r9
 80017d8:	eb4a 040a 	adc.w	r4, sl, sl
 80017dc:	4699      	mov	r9, r3
 80017de:	46a2      	mov	sl, r4
 80017e0:	eb19 090b 	adds.w	r9, r9, fp
 80017e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80017e8:	f04f 0100 	mov.w	r1, #0
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80017f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80017fc:	4689      	mov	r9, r1
 80017fe:	4692      	mov	sl, r2
 8001800:	eb1b 0509 	adds.w	r5, fp, r9
 8001804:	eb4c 060a 	adc.w	r6, ip, sl
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4619      	mov	r1, r3
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	f04f 0400 	mov.w	r4, #0
 800181a:	0094      	lsls	r4, r2, #2
 800181c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001820:	008b      	lsls	r3, r1, #2
 8001822:	461a      	mov	r2, r3
 8001824:	4623      	mov	r3, r4
 8001826:	4628      	mov	r0, r5
 8001828:	4631      	mov	r1, r6
 800182a:	f7fe fcd1 	bl	80001d0 <__aeabi_uldivmod>
 800182e:	4603      	mov	r3, r0
 8001830:	460c      	mov	r4, r1
 8001832:	461a      	mov	r2, r3
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <UART_SetConfig+0x6f4>)
 8001836:	fba3 1302 	umull	r1, r3, r3, r2
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2164      	movs	r1, #100	; 0x64
 800183e:	fb01 f303 	mul.w	r3, r1, r3
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	3332      	adds	r3, #50	; 0x32
 8001848:	4a09      	ldr	r2, [pc, #36]	; (8001870 <UART_SetConfig+0x6f4>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	095b      	lsrs	r3, r3, #5
 8001850:	f003 020f 	and.w	r2, r3, #15
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4442      	add	r2, r8
 800185a:	609a      	str	r2, [r3, #8]
}
 800185c:	e7ff      	b.n	800185e <UART_SetConfig+0x6e2>
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001868:	40011000 	.word	0x40011000
 800186c:	40011400 	.word	0x40011400
 8001870:	51eb851f 	.word	0x51eb851f

08001874 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f103 0208 	add.w	r2, r3, #8
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800188c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f103 0208 	add.w	r2, r3, #8
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f103 0208 	add.w	r2, r3, #8
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80018ce:	b480      	push	{r7}
 80018d0:	b085      	sub	sp, #20
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	601a      	str	r2, [r3, #0]
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001916:	b480      	push	{r7}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800192c:	d103      	bne.n	8001936 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e00c      	b.n	8001950 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3308      	adds	r3, #8
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	e002      	b.n	8001944 <vListInsert+0x2e>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	429a      	cmp	r2, r3
 800194e:	d2f6      	bcs.n	800193e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	601a      	str	r2, [r3, #0]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6892      	ldr	r2, [r2, #8]
 800199e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6852      	ldr	r2, [r2, #4]
 80019a8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d103      	bne.n	80019bc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	1e5a      	subs	r2, r3, #1
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d109      	bne.n	8001a04 <xQueueGenericReset+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80019f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f4:	f383 8811 	msr	BASEPRI, r3
 80019f8:	f3bf 8f6f 	isb	sy
 80019fc:	f3bf 8f4f 	dsb	sy
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	e7fe      	b.n	8001a02 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8001a04:	f001 ff34 	bl	8003870 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a10:	68f9      	ldr	r1, [r7, #12]
 8001a12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	441a      	add	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a34:	3b01      	subs	r3, #1
 8001a36:	68f9      	ldr	r1, [r7, #12]
 8001a38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a3a:	fb01 f303 	mul.w	r3, r1, r3
 8001a3e:	441a      	add	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	22ff      	movs	r2, #255	; 0xff
 8001a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	22ff      	movs	r2, #255	; 0xff
 8001a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d114      	bne.n	8001a84 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d01a      	beq.n	8001a98 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	3310      	adds	r3, #16
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 f836 	bl	8002ad8 <xTaskRemoveFromEventList>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d012      	beq.n	8001a98 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <xQueueGenericReset+0xcc>)
 8001a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	f3bf 8f4f 	dsb	sy
 8001a7e:	f3bf 8f6f 	isb	sy
 8001a82:	e009      	b.n	8001a98 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3310      	adds	r3, #16
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fef3 	bl	8001874 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	3324      	adds	r3, #36	; 0x24
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff feee 	bl	8001874 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001a98:	f001 ff18 	bl	80038cc <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001a9c:	2301      	movs	r3, #1
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	e000ed04 	.word	0xe000ed04

08001aac <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d109      	bne.n	8001ad4 <xQueueGenericCreate+0x28>
 8001ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac4:	f383 8811 	msr	BASEPRI, r3
 8001ac8:	f3bf 8f6f 	isb	sy
 8001acc:	f3bf 8f4f 	dsb	sy
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	e7fe      	b.n	8001ad2 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	fb02 f303 	mul.w	r3, r2, r3
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <xQueueGenericCreate+0x46>
 8001ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d101      	bne.n	8001af6 <xQueueGenericCreate+0x4a>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <xQueueGenericCreate+0x4c>
 8001af6:	2300      	movs	r3, #0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d109      	bne.n	8001b10 <xQueueGenericCreate+0x64>
 8001afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b00:	f383 8811 	msr	BASEPRI, r3
 8001b04:	f3bf 8f6f 	isb	sy
 8001b08:	f3bf 8f4f 	dsb	sy
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e7fe      	b.n	8001b0e <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001b16:	d909      	bls.n	8001b2c <xQueueGenericCreate+0x80>
 8001b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1c:	f383 8811 	msr	BASEPRI, r3
 8001b20:	f3bf 8f6f 	isb	sy
 8001b24:	f3bf 8f4f 	dsb	sy
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	e7fe      	b.n	8001b2a <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	3350      	adds	r3, #80	; 0x50
 8001b30:	4618      	mov	r0, r3
 8001b32:	f001 ffb7 	bl	8003aa4 <pvPortMalloc>
 8001b36:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00d      	beq.n	8001b5a <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3350      	adds	r3, #80	; 0x50
 8001b46:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001b48:	79fa      	ldrb	r2, [r7, #7]
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 f805 	bl	8001b64 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
    }
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3728      	adds	r7, #40	; 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d103      	bne.n	8001b80 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	e002      	b.n	8001b86 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	68fa      	ldr	r2, [r7, #12]
 8001b8a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001b92:	2101      	movs	r1, #1
 8001b94:	69b8      	ldr	r0, [r7, #24]
 8001b96:	f7ff ff21 	bl	80019dc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	78fa      	ldrb	r2, [r7, #3]
 8001b9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08e      	sub	sp, #56	; 0x38
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <xQueueGenericSend+0x30>
 8001bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bcc:	f383 8811 	msr	BASEPRI, r3
 8001bd0:	f3bf 8f6f 	isb	sy
 8001bd4:	f3bf 8f4f 	dsb	sy
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bda:	e7fe      	b.n	8001bda <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d103      	bne.n	8001bea <xQueueGenericSend+0x3e>
 8001be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <xQueueGenericSend+0x42>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <xQueueGenericSend+0x44>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d109      	bne.n	8001c08 <xQueueGenericSend+0x5c>
 8001bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf8:	f383 8811 	msr	BASEPRI, r3
 8001bfc:	f3bf 8f6f 	isb	sy
 8001c00:	f3bf 8f4f 	dsb	sy
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
 8001c06:	e7fe      	b.n	8001c06 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d103      	bne.n	8001c16 <xQueueGenericSend+0x6a>
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <xQueueGenericSend+0x6e>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <xQueueGenericSend+0x70>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <xQueueGenericSend+0x88>
 8001c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c24:	f383 8811 	msr	BASEPRI, r3
 8001c28:	f3bf 8f6f 	isb	sy
 8001c2c:	f3bf 8f4f 	dsb	sy
 8001c30:	623b      	str	r3, [r7, #32]
 8001c32:	e7fe      	b.n	8001c32 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c34:	f001 f8e8 	bl	8002e08 <xTaskGetSchedulerState>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d102      	bne.n	8001c44 <xQueueGenericSend+0x98>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <xQueueGenericSend+0x9c>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <xQueueGenericSend+0x9e>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <xQueueGenericSend+0xb6>
 8001c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c52:	f383 8811 	msr	BASEPRI, r3
 8001c56:	f3bf 8f6f 	isb	sy
 8001c5a:	f3bf 8f4f 	dsb	sy
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	e7fe      	b.n	8001c60 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001c62:	f001 fe05 	bl	8003870 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d302      	bcc.n	8001c78 <xQueueGenericSend+0xcc>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d129      	bne.n	8001ccc <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	68b9      	ldr	r1, [r7, #8]
 8001c7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c7e:	f000 fa11 	bl	80020a4 <prvCopyDataToQueue>
 8001c82:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d010      	beq.n	8001cae <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8e:	3324      	adds	r3, #36	; 0x24
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 ff21 	bl	8002ad8 <xTaskRemoveFromEventList>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001c9c:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <xQueueGenericSend+0x1f0>)
 8001c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f3bf 8f4f 	dsb	sy
 8001ca8:	f3bf 8f6f 	isb	sy
 8001cac:	e00a      	b.n	8001cc4 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d007      	beq.n	8001cc4 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001cb4:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <xQueueGenericSend+0x1f0>)
 8001cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	f3bf 8f4f 	dsb	sy
 8001cc0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001cc4:	f001 fe02 	bl	80038cc <vPortExitCritical>
                return pdPASS;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e063      	b.n	8001d94 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d103      	bne.n	8001cda <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001cd2:	f001 fdfb 	bl	80038cc <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e05c      	b.n	8001d94 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d106      	bne.n	8001cee <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 ff59 	bl	8002b9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001cea:	2301      	movs	r3, #1
 8001cec:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001cee:	f001 fded 	bl	80038cc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001cf2:	f000 fcd7 	bl	80026a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001cf6:	f001 fdbb 	bl	8003870 <vPortEnterCritical>
 8001cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d06:	d103      	bne.n	8001d10 <xQueueGenericSend+0x164>
 8001d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d16:	b25b      	sxtb	r3, r3
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d1c:	d103      	bne.n	8001d26 <xQueueGenericSend+0x17a>
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d26:	f001 fdd1 	bl	80038cc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001d2a:	1d3a      	adds	r2, r7, #4
 8001d2c:	f107 0314 	add.w	r3, r7, #20
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 ff48 	bl	8002bc8 <xTaskCheckForTimeOut>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d124      	bne.n	8001d88 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001d3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d40:	f000 faa8 	bl	8002294 <prvIsQueueFull>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d018      	beq.n	8001d7c <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4c:	3310      	adds	r3, #16
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fe72 	bl	8002a3c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d5a:	f000 fa33 	bl	80021c4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001d5e:	f000 fcaf 	bl	80026c0 <xTaskResumeAll>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f47f af7c 	bne.w	8001c62 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <xQueueGenericSend+0x1f0>)
 8001d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	f3bf 8f4f 	dsb	sy
 8001d76:	f3bf 8f6f 	isb	sy
 8001d7a:	e772      	b.n	8001c62 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d7e:	f000 fa21 	bl	80021c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001d82:	f000 fc9d 	bl	80026c0 <xTaskResumeAll>
 8001d86:	e76c      	b.n	8001c62 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d8a:	f000 fa1b 	bl	80021c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001d8e:	f000 fc97 	bl	80026c0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001d92:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3738      	adds	r7, #56	; 0x38
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	e000ed04 	.word	0xe000ed04

08001da0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b090      	sub	sp, #64	; 0x40
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
 8001dac:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <xQueueGenericSendFromISR+0x2c>
 8001db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dbc:	f383 8811 	msr	BASEPRI, r3
 8001dc0:	f3bf 8f6f 	isb	sy
 8001dc4:	f3bf 8f4f 	dsb	sy
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dca:	e7fe      	b.n	8001dca <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d103      	bne.n	8001dda <xQueueGenericSendFromISR+0x3a>
 8001dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <xQueueGenericSendFromISR+0x3e>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <xQueueGenericSendFromISR+0x40>
 8001dde:	2300      	movs	r3, #0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d109      	bne.n	8001df8 <xQueueGenericSendFromISR+0x58>
 8001de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de8:	f383 8811 	msr	BASEPRI, r3
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	f3bf 8f4f 	dsb	sy
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
 8001df6:	e7fe      	b.n	8001df6 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d103      	bne.n	8001e06 <xQueueGenericSendFromISR+0x66>
 8001dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <xQueueGenericSendFromISR+0x6a>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <xQueueGenericSendFromISR+0x6c>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d109      	bne.n	8001e24 <xQueueGenericSendFromISR+0x84>
 8001e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e14:	f383 8811 	msr	BASEPRI, r3
 8001e18:	f3bf 8f6f 	isb	sy
 8001e1c:	f3bf 8f4f 	dsb	sy
 8001e20:	623b      	str	r3, [r7, #32]
 8001e22:	e7fe      	b.n	8001e22 <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e24:	f001 fe00 	bl	8003a28 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8001e28:	f3ef 8211 	mrs	r2, BASEPRI
 8001e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e30:	f383 8811 	msr	BASEPRI, r3
 8001e34:	f3bf 8f6f 	isb	sy
 8001e38:	f3bf 8f4f 	dsb	sy
 8001e3c:	61fa      	str	r2, [r7, #28]
 8001e3e:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8001e40:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001e42:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d302      	bcc.n	8001e56 <xQueueGenericSendFromISR+0xb6>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d13d      	bne.n	8001ed2 <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001e6c:	f000 f91a 	bl	80020a4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001e70:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e78:	d112      	bne.n	8001ea0 <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d024      	beq.n	8001ecc <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e84:	3324      	adds	r3, #36	; 0x24
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fe26 	bl	8002ad8 <xTaskRemoveFromEventList>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01c      	beq.n	8001ecc <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d019      	beq.n	8001ecc <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	e015      	b.n	8001ecc <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001ea0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001ea4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ea6:	d109      	bne.n	8001ebc <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8001ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eac:	f383 8811 	msr	BASEPRI, r3
 8001eb0:	f3bf 8f6f 	isb	sy
 8001eb4:	f3bf 8f4f 	dsb	sy
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	e7fe      	b.n	8001eba <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001ebc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	b25a      	sxtb	r2, r3
 8001ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001ed0:	e001      	b.n	8001ed6 <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3740      	adds	r7, #64	; 0x40
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	; 0x30
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <xQueueReceive+0x2e>
        __asm volatile
 8001f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0a:	f383 8811 	msr	BASEPRI, r3
 8001f0e:	f3bf 8f6f 	isb	sy
 8001f12:	f3bf 8f4f 	dsb	sy
 8001f16:	623b      	str	r3, [r7, #32]
 8001f18:	e7fe      	b.n	8001f18 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d103      	bne.n	8001f28 <xQueueReceive+0x3c>
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <xQueueReceive+0x40>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <xQueueReceive+0x42>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <xQueueReceive+0x5a>
 8001f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f36:	f383 8811 	msr	BASEPRI, r3
 8001f3a:	f3bf 8f6f 	isb	sy
 8001f3e:	f3bf 8f4f 	dsb	sy
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	e7fe      	b.n	8001f44 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f46:	f000 ff5f 	bl	8002e08 <xTaskGetSchedulerState>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <xQueueReceive+0x6a>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <xQueueReceive+0x6e>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <xQueueReceive+0x70>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d109      	bne.n	8001f74 <xQueueReceive+0x88>
 8001f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f64:	f383 8811 	msr	BASEPRI, r3
 8001f68:	f3bf 8f6f 	isb	sy
 8001f6c:	f3bf 8f4f 	dsb	sy
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	e7fe      	b.n	8001f72 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001f74:	f001 fc7c 	bl	8003870 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d01f      	beq.n	8001fc4 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001f84:	68b9      	ldr	r1, [r7, #8]
 8001f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f88:	f000 f8f6 	bl	8002178 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	1e5a      	subs	r2, r3, #1
 8001f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f92:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00f      	beq.n	8001fbc <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9e:	3310      	adds	r3, #16
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fd99 	bl	8002ad8 <xTaskRemoveFromEventList>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d007      	beq.n	8001fbc <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001fac:	4b3c      	ldr	r3, [pc, #240]	; (80020a0 <xQueueReceive+0x1b4>)
 8001fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	f3bf 8f4f 	dsb	sy
 8001fb8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001fbc:	f001 fc86 	bl	80038cc <vPortExitCritical>
                return pdPASS;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e069      	b.n	8002098 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d103      	bne.n	8001fd2 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001fca:	f001 fc7f 	bl	80038cc <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e062      	b.n	8002098 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d106      	bne.n	8001fe6 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 fddd 	bl	8002b9c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001fe6:	f001 fc71 	bl	80038cc <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001fea:	f000 fb5b 	bl	80026a4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001fee:	f001 fc3f 	bl	8003870 <vPortEnterCritical>
 8001ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ffe:	d103      	bne.n	8002008 <xQueueReceive+0x11c>
 8002000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800200e:	b25b      	sxtb	r3, r3
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002014:	d103      	bne.n	800201e <xQueueReceive+0x132>
 8002016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800201e:	f001 fc55 	bl	80038cc <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002022:	1d3a      	adds	r2, r7, #4
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	4611      	mov	r1, r2
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fdcc 	bl	8002bc8 <xTaskCheckForTimeOut>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d123      	bne.n	800207e <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002038:	f000 f916 	bl	8002268 <prvIsQueueEmpty>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d017      	beq.n	8002072 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002044:	3324      	adds	r3, #36	; 0x24
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f000 fcf6 	bl	8002a3c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002052:	f000 f8b7 	bl	80021c4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002056:	f000 fb33 	bl	80026c0 <xTaskResumeAll>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d189      	bne.n	8001f74 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <xQueueReceive+0x1b4>)
 8002062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	f3bf 8f4f 	dsb	sy
 800206c:	f3bf 8f6f 	isb	sy
 8002070:	e780      	b.n	8001f74 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002074:	f000 f8a6 	bl	80021c4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002078:	f000 fb22 	bl	80026c0 <xTaskResumeAll>
 800207c:	e77a      	b.n	8001f74 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800207e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002080:	f000 f8a0 	bl	80021c4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002084:	f000 fb1c 	bl	80026c0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800208a:	f000 f8ed 	bl	8002268 <prvIsQueueEmpty>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	f43f af6f 	beq.w	8001f74 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002096:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002098:	4618      	mov	r0, r3
 800209a:	3730      	adds	r7, #48	; 0x30
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	e000ed04 	.word	0xe000ed04

080020a4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10d      	bne.n	80020de <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d14d      	bne.n	8002166 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 feb8 	bl	8002e44 <xTaskPriorityDisinherit>
 80020d4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	e043      	b.n	8002166 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d119      	bne.n	8002118 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6858      	ldr	r0, [r3, #4]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	461a      	mov	r2, r3
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	f001 fefa 	bl	8003ee8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	441a      	add	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	429a      	cmp	r2, r3
 800210c:	d32b      	bcc.n	8002166 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	e026      	b.n	8002166 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	68d8      	ldr	r0, [r3, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	461a      	mov	r2, r3
 8002122:	68b9      	ldr	r1, [r7, #8]
 8002124:	f001 fee0 	bl	8003ee8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	425b      	negs	r3, r3
 8002132:	441a      	add	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d207      	bcs.n	8002154 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	425b      	negs	r3, r3
 800214e:	441a      	add	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d105      	bne.n	8002166 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	3b01      	subs	r3, #1
 8002164:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800216e:	697b      	ldr	r3, [r7, #20]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d018      	beq.n	80021bc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	441a      	add	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d303      	bcc.n	80021ac <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68d9      	ldr	r1, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	461a      	mov	r2, r3
 80021b6:	6838      	ldr	r0, [r7, #0]
 80021b8:	f001 fe96 	bl	8003ee8 <memcpy>
    }
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80021cc:	f001 fb50 	bl	8003870 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021d6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80021d8:	e011      	b.n	80021fe <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d012      	beq.n	8002208 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3324      	adds	r3, #36	; 0x24
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 fc76 	bl	8002ad8 <xTaskRemoveFromEventList>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80021f2:	f000 fd4d 	bl	8002c90 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80021fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002202:	2b00      	cmp	r3, #0
 8002204:	dce9      	bgt.n	80021da <prvUnlockQueue+0x16>
 8002206:	e000      	b.n	800220a <prvUnlockQueue+0x46>
                        break;
 8002208:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	22ff      	movs	r2, #255	; 0xff
 800220e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002212:	f001 fb5b 	bl	80038cc <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002216:	f001 fb2b 	bl	8003870 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002220:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002222:	e011      	b.n	8002248 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d012      	beq.n	8002252 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3310      	adds	r3, #16
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fc51 	bl	8002ad8 <xTaskRemoveFromEventList>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800223c:	f000 fd28 	bl	8002c90 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002240:	7bbb      	ldrb	r3, [r7, #14]
 8002242:	3b01      	subs	r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800224c:	2b00      	cmp	r3, #0
 800224e:	dce9      	bgt.n	8002224 <prvUnlockQueue+0x60>
 8002250:	e000      	b.n	8002254 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002252:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	22ff      	movs	r2, #255	; 0xff
 8002258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800225c:	f001 fb36 	bl	80038cc <vPortExitCritical>
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002270:	f001 fafe 	bl	8003870 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800227c:	2301      	movs	r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	e001      	b.n	8002286 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002286:	f001 fb21 	bl	80038cc <vPortExitCritical>

    return xReturn;
 800228a:	68fb      	ldr	r3, [r7, #12]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800229c:	f001 fae8 	bl	8003870 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d102      	bne.n	80022b2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80022ac:	2301      	movs	r3, #1
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e001      	b.n	80022b6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80022b6:	f001 fb09 	bl	80038cc <vPortExitCritical>

    return xReturn;
 80022ba:	68fb      	ldr	r3, [r7, #12]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	e014      	b.n	80022fe <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80022d4:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <vQueueAddToRegistry+0x4c>)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10b      	bne.n	80022f8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80022e0:	490b      	ldr	r1, [pc, #44]	; (8002310 <vQueueAddToRegistry+0x4c>)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80022ea:	4a09      	ldr	r2, [pc, #36]	; (8002310 <vQueueAddToRegistry+0x4c>)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80022f6:	e005      	b.n	8002304 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3301      	adds	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b07      	cmp	r3, #7
 8002302:	d9e7      	bls.n	80022d4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	20012e14 	.word	0x20012e14

08002314 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002324:	f001 faa4 	bl	8003870 <vPortEnterCritical>
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800232e:	b25b      	sxtb	r3, r3
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002334:	d103      	bne.n	800233e <vQueueWaitForMessageRestricted+0x2a>
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002344:	b25b      	sxtb	r3, r3
 8002346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800234a:	d103      	bne.n	8002354 <vQueueWaitForMessageRestricted+0x40>
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002354:	f001 faba 	bl	80038cc <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	2b00      	cmp	r3, #0
 800235e:	d106      	bne.n	800236e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3324      	adds	r3, #36	; 0x24
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	68b9      	ldr	r1, [r7, #8]
 8002368:	4618      	mov	r0, r3
 800236a:	f000 fb8b 	bl	8002a84 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800236e:	6978      	ldr	r0, [r7, #20]
 8002370:	f7ff ff28 	bl	80021c4 <prvUnlockQueue>
    }
 8002374:	bf00      	nop
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800237c:	b580      	push	{r7, lr}
 800237e:	b08c      	sub	sp, #48	; 0x30
 8002380:	af04      	add	r7, sp, #16
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	4613      	mov	r3, r2
 800238a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4618      	mov	r0, r3
 8002392:	f001 fb87 	bl	8003aa4 <pvPortMalloc>
 8002396:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00e      	beq.n	80023bc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800239e:	2058      	movs	r0, #88	; 0x58
 80023a0:	f001 fb80 	bl	8003aa4 <pvPortMalloc>
 80023a4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
 80023b2:	e005      	b.n	80023c0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80023b4:	6978      	ldr	r0, [r7, #20]
 80023b6:	f001 fc51 	bl	8003c5c <vPortFree>
 80023ba:	e001      	b.n	80023c0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d013      	beq.n	80023ee <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023c6:	88fa      	ldrh	r2, [r7, #6]
 80023c8:	2300      	movs	r3, #0
 80023ca:	9303      	str	r3, [sp, #12]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	9302      	str	r3, [sp, #8]
 80023d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f80e 	bl	80023fe <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80023e2:	69f8      	ldr	r0, [r7, #28]
 80023e4:	f000 f8a0 	bl	8002528 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80023e8:	2301      	movs	r3, #1
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	e002      	b.n	80023f4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023f2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80023f4:	69bb      	ldr	r3, [r7, #24]
    }
 80023f6:	4618      	mov	r0, r3
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b088      	sub	sp, #32
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800240c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	461a      	mov	r2, r3
 8002416:	21a5      	movs	r1, #165	; 0xa5
 8002418:	f001 fd71 	bl	8003efe <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002426:	3b01      	subs	r3, #1
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	f023 0307 	bic.w	r3, r3, #7
 8002434:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	2b00      	cmp	r3, #0
 800243e:	d009      	beq.n	8002454 <prvInitialiseNewTask+0x56>
 8002440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	e7fe      	b.n	8002452 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d01f      	beq.n	800249a <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	e012      	b.n	8002486 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	4413      	add	r3, r2
 8002466:	7819      	ldrb	r1, [r3, #0]
 8002468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	4413      	add	r3, r2
 800246e:	3334      	adds	r3, #52	; 0x34
 8002470:	460a      	mov	r2, r1
 8002472:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	4413      	add	r3, r2
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d006      	beq.n	800248e <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	3301      	adds	r3, #1
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	2b09      	cmp	r3, #9
 800248a:	d9e9      	bls.n	8002460 <prvInitialiseNewTask+0x62>
 800248c:	e000      	b.n	8002490 <prvInitialiseNewTask+0x92>
            {
                break;
 800248e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002498:	e003      	b.n	80024a2 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d901      	bls.n	80024ac <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024a8:	2304      	movs	r3, #4
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024b0:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024b6:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	2200      	movs	r2, #0
 80024bc:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	3304      	adds	r3, #4
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff f9f6 	bl	80018b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	3318      	adds	r3, #24
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff f9f1 	bl	80018b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024d6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024da:	f1c3 0205 	rsb	r2, r3, #5
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80024e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ea:	3350      	adds	r3, #80	; 0x50
 80024ec:	2204      	movs	r2, #4
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f001 fd04 	bl	8003efe <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	3354      	adds	r3, #84	; 0x54
 80024fa:	2201      	movs	r2, #1
 80024fc:	2100      	movs	r1, #0
 80024fe:	4618      	mov	r0, r3
 8002500:	f001 fcfd 	bl	8003efe <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	68f9      	ldr	r1, [r7, #12]
 8002508:	69b8      	ldr	r0, [r7, #24]
 800250a:	f001 f887 	bl	800361c <pxPortInitialiseStack>
 800250e:	4602      	mov	r2, r0
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800251a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800251e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002520:	bf00      	nop
 8002522:	3720      	adds	r7, #32
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002530:	f001 f99e 	bl	8003870 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002534:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <prvAddNewTaskToReadyList+0xc0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3301      	adds	r3, #1
 800253a:	4a2b      	ldr	r2, [pc, #172]	; (80025e8 <prvAddNewTaskToReadyList+0xc0>)
 800253c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800253e:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <prvAddNewTaskToReadyList+0xc4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002546:	4a29      	ldr	r2, [pc, #164]	; (80025ec <prvAddNewTaskToReadyList+0xc4>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800254c:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <prvAddNewTaskToReadyList+0xc0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d110      	bne.n	8002576 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002554:	f000 fbc0 	bl	8002cd8 <prvInitialiseTaskLists>
 8002558:	e00d      	b.n	8002576 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800255a:	4b25      	ldr	r3, [pc, #148]	; (80025f0 <prvAddNewTaskToReadyList+0xc8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002562:	4b22      	ldr	r3, [pc, #136]	; (80025ec <prvAddNewTaskToReadyList+0xc4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	429a      	cmp	r2, r3
 800256e:	d802      	bhi.n	8002576 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002570:	4a1e      	ldr	r2, [pc, #120]	; (80025ec <prvAddNewTaskToReadyList+0xc4>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002576:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <prvAddNewTaskToReadyList+0xcc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <prvAddNewTaskToReadyList+0xcc>)
 800257e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002580:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <prvAddNewTaskToReadyList+0xcc>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	2201      	movs	r2, #1
 800258e:	409a      	lsls	r2, r3
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <prvAddNewTaskToReadyList+0xd0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4313      	orrs	r3, r2
 8002596:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <prvAddNewTaskToReadyList+0xd0>)
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4a15      	ldr	r2, [pc, #84]	; (80025fc <prvAddNewTaskToReadyList+0xd4>)
 80025a8:	441a      	add	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3304      	adds	r3, #4
 80025ae:	4619      	mov	r1, r3
 80025b0:	4610      	mov	r0, r2
 80025b2:	f7ff f98c 	bl	80018ce <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80025b6:	f001 f989 	bl	80038cc <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80025ba:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <prvAddNewTaskToReadyList+0xc8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00e      	beq.n	80025e0 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <prvAddNewTaskToReadyList+0xc4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d207      	bcs.n	80025e0 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <prvAddNewTaskToReadyList+0xd8>)
 80025d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	f3bf 8f4f 	dsb	sy
 80025dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000178 	.word	0x20000178
 80025ec:	200000a0 	.word	0x200000a0
 80025f0:	20000184 	.word	0x20000184
 80025f4:	20000194 	.word	0x20000194
 80025f8:	20000180 	.word	0x20000180
 80025fc:	200000a4 	.word	0x200000a4
 8002600:	e000ed04 	.word	0xe000ed04

08002604 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800260a:	4b1f      	ldr	r3, [pc, #124]	; (8002688 <vTaskStartScheduler+0x84>)
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	2300      	movs	r3, #0
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2300      	movs	r3, #0
 8002614:	2282      	movs	r2, #130	; 0x82
 8002616:	491d      	ldr	r1, [pc, #116]	; (800268c <vTaskStartScheduler+0x88>)
 8002618:	481d      	ldr	r0, [pc, #116]	; (8002690 <vTaskStartScheduler+0x8c>)
 800261a:	f7ff feaf 	bl	800237c <xTaskCreate>
 800261e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002626:	f000 fceb 	bl	8003000 <xTimerCreateTimerTask>
 800262a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d115      	bne.n	800265e <vTaskStartScheduler+0x5a>
 8002632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <vTaskStartScheduler+0x90>)
 8002646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800264a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <vTaskStartScheduler+0x94>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <vTaskStartScheduler+0x98>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002658:	f001 f86c 	bl	8003734 <xPortStartScheduler>
 800265c:	e00d      	b.n	800267a <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002664:	d109      	bne.n	800267a <vTaskStartScheduler+0x76>
 8002666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266a:	f383 8811 	msr	BASEPRI, r3
 800266e:	f3bf 8f6f 	isb	sy
 8002672:	f3bf 8f4f 	dsb	sy
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	e7fe      	b.n	8002678 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <vTaskStartScheduler+0x9c>)
 800267c:	681b      	ldr	r3, [r3, #0]
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	2000019c 	.word	0x2000019c
 800268c:	08004818 	.word	0x08004818
 8002690:	08002ca9 	.word	0x08002ca9
 8002694:	20000198 	.word	0x20000198
 8002698:	20000184 	.word	0x20000184
 800269c:	2000017c 	.word	0x2000017c
 80026a0:	2000000c 	.word	0x2000000c

080026a4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80026a8:	4b04      	ldr	r3, [pc, #16]	; (80026bc <vTaskSuspendAll+0x18>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	3301      	adds	r3, #1
 80026ae:	4a03      	ldr	r2, [pc, #12]	; (80026bc <vTaskSuspendAll+0x18>)
 80026b0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	200001a0 	.word	0x200001a0

080026c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80026ce:	4b41      	ldr	r3, [pc, #260]	; (80027d4 <xTaskResumeAll+0x114>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <xTaskResumeAll+0x2a>
 80026d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026da:	f383 8811 	msr	BASEPRI, r3
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	e7fe      	b.n	80026e8 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80026ea:	f001 f8c1 	bl	8003870 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80026ee:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <xTaskResumeAll+0x114>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	4a37      	ldr	r2, [pc, #220]	; (80027d4 <xTaskResumeAll+0x114>)
 80026f6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026f8:	4b36      	ldr	r3, [pc, #216]	; (80027d4 <xTaskResumeAll+0x114>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d161      	bne.n	80027c4 <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002700:	4b35      	ldr	r3, [pc, #212]	; (80027d8 <xTaskResumeAll+0x118>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d05d      	beq.n	80027c4 <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002708:	e02e      	b.n	8002768 <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800270a:	4b34      	ldr	r3, [pc, #208]	; (80027dc <xTaskResumeAll+0x11c>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3318      	adds	r3, #24
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff f936 	bl	8001988 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3304      	adds	r3, #4
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff f931 	bl	8001988 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	2201      	movs	r2, #1
 800272c:	409a      	lsls	r2, r3
 800272e:	4b2c      	ldr	r3, [pc, #176]	; (80027e0 <xTaskResumeAll+0x120>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	4a2a      	ldr	r2, [pc, #168]	; (80027e0 <xTaskResumeAll+0x120>)
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4a27      	ldr	r2, [pc, #156]	; (80027e4 <xTaskResumeAll+0x124>)
 8002746:	441a      	add	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3304      	adds	r3, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f7ff f8bd 	bl	80018ce <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002758:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <xTaskResumeAll+0x128>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	429a      	cmp	r2, r3
 8002760:	d302      	bcc.n	8002768 <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 8002762:	4b22      	ldr	r3, [pc, #136]	; (80027ec <xTaskResumeAll+0x12c>)
 8002764:	2201      	movs	r2, #1
 8002766:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002768:	4b1c      	ldr	r3, [pc, #112]	; (80027dc <xTaskResumeAll+0x11c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1cc      	bne.n	800270a <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002776:	f000 fb2b 	bl	8002dd0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <xTaskResumeAll+0x130>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d010      	beq.n	80027a8 <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002786:	f000 f847 	bl	8002818 <xTaskIncrementTick>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 8002790:	4b16      	ldr	r3, [pc, #88]	; (80027ec <xTaskResumeAll+0x12c>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3b01      	subs	r3, #1
 800279a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f1      	bne.n	8002786 <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 80027a2:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <xTaskResumeAll+0x130>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80027a8:	4b10      	ldr	r3, [pc, #64]	; (80027ec <xTaskResumeAll+0x12c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d009      	beq.n	80027c4 <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80027b0:	2301      	movs	r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <xTaskResumeAll+0x134>)
 80027b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80027c4:	f001 f882 	bl	80038cc <vPortExitCritical>

    return xAlreadyYielded;
 80027c8:	68bb      	ldr	r3, [r7, #8]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	200001a0 	.word	0x200001a0
 80027d8:	20000178 	.word	0x20000178
 80027dc:	20000138 	.word	0x20000138
 80027e0:	20000180 	.word	0x20000180
 80027e4:	200000a4 	.word	0x200000a4
 80027e8:	200000a0 	.word	0x200000a0
 80027ec:	2000018c 	.word	0x2000018c
 80027f0:	20000188 	.word	0x20000188
 80027f4:	e000ed04 	.word	0xe000ed04

080027f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <xTaskGetTickCount+0x1c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002804:	687b      	ldr	r3, [r7, #4]
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	2000017c 	.word	0x2000017c

08002818 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002822:	4b4e      	ldr	r3, [pc, #312]	; (800295c <xTaskIncrementTick+0x144>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 808d 	bne.w	8002946 <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800282c:	4b4c      	ldr	r3, [pc, #304]	; (8002960 <xTaskIncrementTick+0x148>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002834:	4a4a      	ldr	r2, [pc, #296]	; (8002960 <xTaskIncrementTick+0x148>)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d11f      	bne.n	8002880 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002840:	4b48      	ldr	r3, [pc, #288]	; (8002964 <xTaskIncrementTick+0x14c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <xTaskIncrementTick+0x46>
 800284a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284e:	f383 8811 	msr	BASEPRI, r3
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	e7fe      	b.n	800285c <xTaskIncrementTick+0x44>
 800285e:	4b41      	ldr	r3, [pc, #260]	; (8002964 <xTaskIncrementTick+0x14c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	4b40      	ldr	r3, [pc, #256]	; (8002968 <xTaskIncrementTick+0x150>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a3e      	ldr	r2, [pc, #248]	; (8002964 <xTaskIncrementTick+0x14c>)
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	4a3e      	ldr	r2, [pc, #248]	; (8002968 <xTaskIncrementTick+0x150>)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	4b3e      	ldr	r3, [pc, #248]	; (800296c <xTaskIncrementTick+0x154>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3301      	adds	r3, #1
 8002878:	4a3c      	ldr	r2, [pc, #240]	; (800296c <xTaskIncrementTick+0x154>)
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	f000 faa8 	bl	8002dd0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002880:	4b3b      	ldr	r3, [pc, #236]	; (8002970 <xTaskIncrementTick+0x158>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	429a      	cmp	r2, r3
 8002888:	d348      	bcc.n	800291c <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800288a:	4b36      	ldr	r3, [pc, #216]	; (8002964 <xTaskIncrementTick+0x14c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d104      	bne.n	800289e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002894:	4b36      	ldr	r3, [pc, #216]	; (8002970 <xTaskIncrementTick+0x158>)
 8002896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800289a:	601a      	str	r2, [r3, #0]
                    break;
 800289c:	e03e      	b.n	800291c <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800289e:	4b31      	ldr	r3, [pc, #196]	; (8002964 <xTaskIncrementTick+0x14c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d203      	bcs.n	80028be <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80028b6:	4a2e      	ldr	r2, [pc, #184]	; (8002970 <xTaskIncrementTick+0x158>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80028bc:	e02e      	b.n	800291c <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	3304      	adds	r3, #4
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f860 	bl	8001988 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d004      	beq.n	80028da <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	3318      	adds	r3, #24
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff f857 	bl	8001988 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	2201      	movs	r2, #1
 80028e0:	409a      	lsls	r2, r3
 80028e2:	4b24      	ldr	r3, [pc, #144]	; (8002974 <xTaskIncrementTick+0x15c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	4a22      	ldr	r2, [pc, #136]	; (8002974 <xTaskIncrementTick+0x15c>)
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4a1f      	ldr	r2, [pc, #124]	; (8002978 <xTaskIncrementTick+0x160>)
 80028fa:	441a      	add	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	3304      	adds	r3, #4
 8002900:	4619      	mov	r1, r3
 8002902:	4610      	mov	r0, r2
 8002904:	f7fe ffe3 	bl	80018ce <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <xTaskIncrementTick+0x164>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	429a      	cmp	r2, r3
 8002914:	d3b9      	bcc.n	800288a <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8002916:	2301      	movs	r3, #1
 8002918:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800291a:	e7b6      	b.n	800288a <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800291c:	4b17      	ldr	r3, [pc, #92]	; (800297c <xTaskIncrementTick+0x164>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002922:	4915      	ldr	r1, [pc, #84]	; (8002978 <xTaskIncrementTick+0x160>)
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d901      	bls.n	8002938 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 8002934:	2301      	movs	r3, #1
 8002936:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <xTaskIncrementTick+0x168>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d007      	beq.n	8002950 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8002940:	2301      	movs	r3, #1
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	e004      	b.n	8002950 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002946:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <xTaskIncrementTick+0x16c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3301      	adds	r3, #1
 800294c:	4a0d      	ldr	r2, [pc, #52]	; (8002984 <xTaskIncrementTick+0x16c>)
 800294e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002950:	697b      	ldr	r3, [r7, #20]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200001a0 	.word	0x200001a0
 8002960:	2000017c 	.word	0x2000017c
 8002964:	20000130 	.word	0x20000130
 8002968:	20000134 	.word	0x20000134
 800296c:	20000190 	.word	0x20000190
 8002970:	20000198 	.word	0x20000198
 8002974:	20000180 	.word	0x20000180
 8002978:	200000a4 	.word	0x200000a4
 800297c:	200000a0 	.word	0x200000a0
 8002980:	2000018c 	.word	0x2000018c
 8002984:	20000188 	.word	0x20000188

08002988 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800298e:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <vTaskSwitchContext+0xa0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002996:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <vTaskSwitchContext+0xa4>)
 8002998:	2201      	movs	r2, #1
 800299a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800299c:	e03e      	b.n	8002a1c <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 800299e:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <vTaskSwitchContext+0xa4>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029a4:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <vTaskSwitchContext+0xa8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80029b2:	7afb      	ldrb	r3, [r7, #11]
 80029b4:	f1c3 031f 	rsb	r3, r3, #31
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	491e      	ldr	r1, [pc, #120]	; (8002a34 <vTaskSwitchContext+0xac>)
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <vTaskSwitchContext+0x5a>
        __asm volatile
 80029ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d2:	f383 8811 	msr	BASEPRI, r3
 80029d6:	f3bf 8f6f 	isb	sy
 80029da:	f3bf 8f4f 	dsb	sy
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	e7fe      	b.n	80029e0 <vTaskSwitchContext+0x58>
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4a11      	ldr	r2, [pc, #68]	; (8002a34 <vTaskSwitchContext+0xac>)
 80029ee:	4413      	add	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	3308      	adds	r3, #8
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d104      	bne.n	8002a12 <vTaskSwitchContext+0x8a>
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4a07      	ldr	r2, [pc, #28]	; (8002a38 <vTaskSwitchContext+0xb0>)
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	200001a0 	.word	0x200001a0
 8002a2c:	2000018c 	.word	0x2000018c
 8002a30:	20000180 	.word	0x20000180
 8002a34:	200000a4 	.word	0x200000a4
 8002a38:	200000a0 	.word	0x200000a0

08002a3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d109      	bne.n	8002a60 <vTaskPlaceOnEventList+0x24>
 8002a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a50:	f383 8811 	msr	BASEPRI, r3
 8002a54:	f3bf 8f6f 	isb	sy
 8002a58:	f3bf 8f4f 	dsb	sy
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	e7fe      	b.n	8002a5e <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a60:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <vTaskPlaceOnEventList+0x44>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3318      	adds	r3, #24
 8002a66:	4619      	mov	r1, r3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7fe ff54 	bl	8001916 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002a6e:	2101      	movs	r1, #1
 8002a70:	6838      	ldr	r0, [r7, #0]
 8002a72:	f000 fa5f 	bl	8002f34 <prvAddCurrentTaskToDelayedList>
}
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	200000a0 	.word	0x200000a0

08002a84 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <vTaskPlaceOnEventListRestricted+0x26>
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	e7fe      	b.n	8002aa8 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <vTaskPlaceOnEventListRestricted+0x50>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	3318      	adds	r3, #24
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f7fe ff0b 	bl	80018ce <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ac2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	68b8      	ldr	r0, [r7, #8]
 8002ac8:	f000 fa34 	bl	8002f34 <prvAddCurrentTaskToDelayedList>
    }
 8002acc:	bf00      	nop
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	200000a0 	.word	0x200000a0

08002ad8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <xTaskRemoveFromEventList+0x2a>
 8002aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	e7fe      	b.n	8002b00 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	3318      	adds	r3, #24
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe ff3e 	bl	8001988 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <xTaskRemoveFromEventList+0xac>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d11c      	bne.n	8002b4e <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	3304      	adds	r3, #4
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe ff35 	bl	8001988 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	2201      	movs	r2, #1
 8002b24:	409a      	lsls	r2, r3
 8002b26:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <xTaskRemoveFromEventList+0xb0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	4a16      	ldr	r2, [pc, #88]	; (8002b88 <xTaskRemoveFromEventList+0xb0>)
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <xTaskRemoveFromEventList+0xb4>)
 8002b3e:	441a      	add	r2, r3
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	3304      	adds	r3, #4
 8002b44:	4619      	mov	r1, r3
 8002b46:	4610      	mov	r0, r2
 8002b48:	f7fe fec1 	bl	80018ce <vListInsertEnd>
 8002b4c:	e005      	b.n	8002b5a <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	3318      	adds	r3, #24
 8002b52:	4619      	mov	r1, r3
 8002b54:	480e      	ldr	r0, [pc, #56]	; (8002b90 <xTaskRemoveFromEventList+0xb8>)
 8002b56:	f7fe feba 	bl	80018ce <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <xTaskRemoveFromEventList+0xbc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d905      	bls.n	8002b74 <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <xTaskRemoveFromEventList+0xc0>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	e001      	b.n	8002b78 <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002b78:	697b      	ldr	r3, [r7, #20]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200001a0 	.word	0x200001a0
 8002b88:	20000180 	.word	0x20000180
 8002b8c:	200000a4 	.word	0x200000a4
 8002b90:	20000138 	.word	0x20000138
 8002b94:	200000a0 	.word	0x200000a0
 8002b98:	2000018c 	.word	0x2000018c

08002b9c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <vTaskInternalSetTimeOutState+0x24>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <vTaskInternalSetTimeOutState+0x28>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	605a      	str	r2, [r3, #4]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	20000190 	.word	0x20000190
 8002bc4:	2000017c 	.word	0x2000017c

08002bc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <xTaskCheckForTimeOut+0x24>
 8002bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bdc:	f383 8811 	msr	BASEPRI, r3
 8002be0:	f3bf 8f6f 	isb	sy
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	e7fe      	b.n	8002bea <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d109      	bne.n	8002c06 <xTaskCheckForTimeOut+0x3e>
 8002bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf6:	f383 8811 	msr	BASEPRI, r3
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e7fe      	b.n	8002c04 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8002c06:	f000 fe33 	bl	8003870 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002c0a:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <xTaskCheckForTimeOut+0xc0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c22:	d102      	bne.n	8002c2a <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
 8002c28:	e026      	b.n	8002c78 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <xTaskCheckForTimeOut+0xc4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d00a      	beq.n	8002c4c <xTaskCheckForTimeOut+0x84>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d305      	bcc.n	8002c4c <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002c40:	2301      	movs	r3, #1
 8002c42:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e015      	b.n	8002c78 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d20b      	bcs.n	8002c6e <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	1ad2      	subs	r2, r2, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff ff9a 	bl	8002b9c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61fb      	str	r3, [r7, #28]
 8002c6c:	e004      	b.n	8002c78 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002c74:	2301      	movs	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002c78:	f000 fe28 	bl	80038cc <vPortExitCritical>

    return xReturn;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	2000017c 	.word	0x2000017c
 8002c8c:	20000190 	.word	0x20000190

08002c90 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <vTaskMissedYield+0x14>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
}
 8002c9a:	bf00      	nop
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	2000018c 	.word	0x2000018c

08002ca8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002cb0:	f000 f852 	bl	8002d58 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <prvIdleTask+0x28>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d9f9      	bls.n	8002cb0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <prvIdleTask+0x2c>)
 8002cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ccc:	e7f0      	b.n	8002cb0 <prvIdleTask+0x8>
 8002cce:	bf00      	nop
 8002cd0:	200000a4 	.word	0x200000a4
 8002cd4:	e000ed04 	.word	0xe000ed04

08002cd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	e00c      	b.n	8002cfe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4a12      	ldr	r2, [pc, #72]	; (8002d38 <prvInitialiseTaskLists+0x60>)
 8002cf0:	4413      	add	r3, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fdbe 	bl	8001874 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d9ef      	bls.n	8002ce4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002d04:	480d      	ldr	r0, [pc, #52]	; (8002d3c <prvInitialiseTaskLists+0x64>)
 8002d06:	f7fe fdb5 	bl	8001874 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002d0a:	480d      	ldr	r0, [pc, #52]	; (8002d40 <prvInitialiseTaskLists+0x68>)
 8002d0c:	f7fe fdb2 	bl	8001874 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002d10:	480c      	ldr	r0, [pc, #48]	; (8002d44 <prvInitialiseTaskLists+0x6c>)
 8002d12:	f7fe fdaf 	bl	8001874 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002d16:	480c      	ldr	r0, [pc, #48]	; (8002d48 <prvInitialiseTaskLists+0x70>)
 8002d18:	f7fe fdac 	bl	8001874 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002d1c:	480b      	ldr	r0, [pc, #44]	; (8002d4c <prvInitialiseTaskLists+0x74>)
 8002d1e:	f7fe fda9 	bl	8001874 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <prvInitialiseTaskLists+0x78>)
 8002d24:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <prvInitialiseTaskLists+0x64>)
 8002d26:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <prvInitialiseTaskLists+0x7c>)
 8002d2a:	4a05      	ldr	r2, [pc, #20]	; (8002d40 <prvInitialiseTaskLists+0x68>)
 8002d2c:	601a      	str	r2, [r3, #0]
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200000a4 	.word	0x200000a4
 8002d3c:	20000108 	.word	0x20000108
 8002d40:	2000011c 	.word	0x2000011c
 8002d44:	20000138 	.word	0x20000138
 8002d48:	2000014c 	.word	0x2000014c
 8002d4c:	20000164 	.word	0x20000164
 8002d50:	20000130 	.word	0x20000130
 8002d54:	20000134 	.word	0x20000134

08002d58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d5e:	e019      	b.n	8002d94 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002d60:	f000 fd86 	bl	8003870 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d64:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <prvCheckTasksWaitingTermination+0x4c>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fe fe09 	bl	8001988 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002d76:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <prvCheckTasksWaitingTermination+0x50>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <prvCheckTasksWaitingTermination+0x50>)
 8002d7e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <prvCheckTasksWaitingTermination+0x54>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	4a09      	ldr	r2, [pc, #36]	; (8002dac <prvCheckTasksWaitingTermination+0x54>)
 8002d88:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002d8a:	f000 fd9f 	bl	80038cc <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f80e 	bl	8002db0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <prvCheckTasksWaitingTermination+0x54>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e1      	bne.n	8002d60 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	2000014c 	.word	0x2000014c
 8002da8:	20000178 	.word	0x20000178
 8002dac:	20000160 	.word	0x20000160

08002db0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 ff4d 	bl	8003c5c <vPortFree>
                vPortFree( pxTCB );
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 ff4a 	bl	8003c5c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <prvResetNextTaskUnblockTime+0x30>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d104      	bne.n	8002de8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <prvResetNextTaskUnblockTime+0x34>)
 8002de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002de4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002de6:	e005      	b.n	8002df4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <prvResetNextTaskUnblockTime+0x30>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <prvResetNextTaskUnblockTime+0x34>)
 8002df2:	6013      	str	r3, [r2, #0]
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000130 	.word	0x20000130
 8002e04:	20000198 	.word	0x20000198

08002e08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <xTaskGetSchedulerState+0x34>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002e16:	2301      	movs	r3, #1
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	e008      	b.n	8002e2e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <xTaskGetSchedulerState+0x38>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002e24:	2302      	movs	r3, #2
 8002e26:	607b      	str	r3, [r7, #4]
 8002e28:	e001      	b.n	8002e2e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002e2e:	687b      	ldr	r3, [r7, #4]
    }
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	20000184 	.word	0x20000184
 8002e40:	200001a0 	.word	0x200001a0

08002e44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d061      	beq.n	8002f1e <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002e5a:	4b33      	ldr	r3, [pc, #204]	; (8002f28 <xTaskPriorityDisinherit+0xe4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d009      	beq.n	8002e78 <xTaskPriorityDisinherit+0x34>
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	e7fe      	b.n	8002e76 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d109      	bne.n	8002e94 <xTaskPriorityDisinherit+0x50>
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	e7fe      	b.n	8002e92 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e98:	1e5a      	subs	r2, r3, #1
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d039      	beq.n	8002f1e <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d135      	bne.n	8002f1e <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fd66 	bl	8001988 <uxListRemove>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10a      	bne.n	8002ed8 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43da      	mvns	r2, r3
 8002ece:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <xTaskPriorityDisinherit+0xe8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	4a15      	ldr	r2, [pc, #84]	; (8002f2c <xTaskPriorityDisinherit+0xe8>)
 8002ed6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	f1c3 0205 	rsb	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <xTaskPriorityDisinherit+0xe8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	4a0c      	ldr	r2, [pc, #48]	; (8002f2c <xTaskPriorityDisinherit+0xe8>)
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4a09      	ldr	r2, [pc, #36]	; (8002f30 <xTaskPriorityDisinherit+0xec>)
 8002f0c:	441a      	add	r2, r3
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	3304      	adds	r3, #4
 8002f12:	4619      	mov	r1, r3
 8002f14:	4610      	mov	r0, r2
 8002f16:	f7fe fcda 	bl	80018ce <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002f1e:	697b      	ldr	r3, [r7, #20]
    }
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	200000a0 	.word	0x200000a0
 8002f2c:	20000180 	.word	0x20000180
 8002f30:	200000a4 	.word	0x200000a4

08002f34 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002f3e:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f44:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3304      	adds	r3, #4
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fd1c 	bl	8001988 <uxListRemove>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10b      	bne.n	8002f6e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43da      	mvns	r2, r3
 8002f64:	4b21      	ldr	r3, [pc, #132]	; (8002fec <prvAddCurrentTaskToDelayedList+0xb8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	4a20      	ldr	r2, [pc, #128]	; (8002fec <prvAddCurrentTaskToDelayedList+0xb8>)
 8002f6c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f74:	d10a      	bne.n	8002f8c <prvAddCurrentTaskToDelayedList+0x58>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d007      	beq.n	8002f8c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f7c:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3304      	adds	r3, #4
 8002f82:	4619      	mov	r1, r3
 8002f84:	481a      	ldr	r0, [pc, #104]	; (8002ff0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002f86:	f7fe fca2 	bl	80018ce <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002f8a:	e026      	b.n	8002fda <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f94:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d209      	bcs.n	8002fb8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3304      	adds	r3, #4
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f7fe fcb0 	bl	8001916 <vListInsert>
}
 8002fb6:	e010      	b.n	8002fda <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f7fe fca6 	bl	8001916 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d202      	bcs.n	8002fda <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8002fd4:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	6013      	str	r3, [r2, #0]
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000017c 	.word	0x2000017c
 8002fe8:	200000a0 	.word	0x200000a0
 8002fec:	20000180 	.word	0x20000180
 8002ff0:	20000164 	.word	0x20000164
 8002ff4:	20000134 	.word	0x20000134
 8002ff8:	20000130 	.word	0x20000130
 8002ffc:	20000198 	.word	0x20000198

08003000 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003006:	2300      	movs	r3, #0
 8003008:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800300a:	f000 fad1 	bl	80035b0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800300e:	4b11      	ldr	r3, [pc, #68]	; (8003054 <xTimerCreateTimerTask+0x54>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <xTimerCreateTimerTask+0x58>)
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	2302      	movs	r3, #2
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	2300      	movs	r3, #0
 8003020:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003024:	490d      	ldr	r1, [pc, #52]	; (800305c <xTimerCreateTimerTask+0x5c>)
 8003026:	480e      	ldr	r0, [pc, #56]	; (8003060 <xTimerCreateTimerTask+0x60>)
 8003028:	f7ff f9a8 	bl	800237c <xTaskCreate>
 800302c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <xTimerCreateTimerTask+0x48>
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	e7fe      	b.n	8003046 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8003048:	687b      	ldr	r3, [r7, #4]
    }
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200001d4 	.word	0x200001d4
 8003058:	200001d8 	.word	0x200001d8
 800305c:	08004820 	.word	0x08004820
 8003060:	08003195 	.word	0x08003195

08003064 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003072:	2300      	movs	r3, #0
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <xTimerGenericCommand+0x2c>
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	623b      	str	r3, [r7, #32]
 800308e:	e7fe      	b.n	800308e <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <xTimerGenericCommand+0x94>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d02a      	beq.n	80030ee <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b05      	cmp	r3, #5
 80030a8:	dc18      	bgt.n	80030dc <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80030aa:	f7ff fead 	bl	8002e08 <xTaskGetSchedulerState>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d109      	bne.n	80030c8 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80030b4:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <xTimerGenericCommand+0x94>)
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	f107 0114 	add.w	r1, r7, #20
 80030bc:	2300      	movs	r3, #0
 80030be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c0:	f7fe fd74 	bl	8001bac <xQueueGenericSend>
 80030c4:	6278      	str	r0, [r7, #36]	; 0x24
 80030c6:	e012      	b.n	80030ee <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <xTimerGenericCommand+0x94>)
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	f107 0114 	add.w	r1, r7, #20
 80030d0:	2300      	movs	r3, #0
 80030d2:	2200      	movs	r2, #0
 80030d4:	f7fe fd6a 	bl	8001bac <xQueueGenericSend>
 80030d8:	6278      	str	r0, [r7, #36]	; 0x24
 80030da:	e008      	b.n	80030ee <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <xTimerGenericCommand+0x94>)
 80030de:	6818      	ldr	r0, [r3, #0]
 80030e0:	f107 0114 	add.w	r1, r7, #20
 80030e4:	2300      	movs	r3, #0
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	f7fe fe5a 	bl	8001da0 <xQueueGenericSendFromISR>
 80030ec:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80030f0:	4618      	mov	r0, r3
 80030f2:	3728      	adds	r7, #40	; 0x28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	200001d4 	.word	0x200001d4

080030fc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af02      	add	r7, sp, #8
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003106:	4b22      	ldr	r3, [pc, #136]	; (8003190 <prvProcessExpiredTimer+0x94>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	3304      	adds	r3, #4
 8003114:	4618      	mov	r0, r3
 8003116:	f7fe fc37 	bl	8001988 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d021      	beq.n	800316c <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	699a      	ldr	r2, [r3, #24]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	18d1      	adds	r1, r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	6978      	ldr	r0, [r7, #20]
 8003136:	f000 f8d1 	bl	80032dc <prvInsertTimerInActiveList>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01e      	beq.n	800317e <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003140:	2300      	movs	r3, #0
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	2300      	movs	r3, #0
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	2100      	movs	r1, #0
 800314a:	6978      	ldr	r0, [r7, #20]
 800314c:	f7ff ff8a 	bl	8003064 <xTimerGenericCommand>
 8003150:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d112      	bne.n	800317e <prvProcessExpiredTimer+0x82>
 8003158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315c:	f383 8811 	msr	BASEPRI, r3
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	e7fe      	b.n	800316a <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003172:	f023 0301 	bic.w	r3, r3, #1
 8003176:	b2da      	uxtb	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	6978      	ldr	r0, [r7, #20]
 8003184:	4798      	blx	r3
    }
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	200001cc 	.word	0x200001cc

08003194 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800319c:	f107 0308 	add.w	r3, r7, #8
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 f857 	bl	8003254 <prvGetNextExpireTime>
 80031a6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4619      	mov	r1, r3
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f803 	bl	80031b8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80031b2:	f000 f8d5 	bl	8003360 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80031b6:	e7f1      	b.n	800319c <prvTimerTask+0x8>

080031b8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80031c2:	f7ff fa6f 	bl	80026a4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80031c6:	f107 0308 	add.w	r3, r7, #8
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 f866 	bl	800329c <prvSampleTimeNow>
 80031d0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d130      	bne.n	800323a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10a      	bne.n	80031f4 <prvProcessTimerOrBlockTask+0x3c>
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d806      	bhi.n	80031f4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80031e6:	f7ff fa6b 	bl	80026c0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff ff85 	bl	80030fc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80031f2:	e024      	b.n	800323e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80031fa:	4b13      	ldr	r3, [pc, #76]	; (8003248 <prvProcessTimerOrBlockTask+0x90>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <prvProcessTimerOrBlockTask+0x50>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <prvProcessTimerOrBlockTask+0x52>
 8003208:	2300      	movs	r3, #0
 800320a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <prvProcessTimerOrBlockTask+0x94>)
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	4619      	mov	r1, r3
 800321a:	f7ff f87b 	bl	8002314 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800321e:	f7ff fa4f 	bl	80026c0 <xTaskResumeAll>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <prvProcessTimerOrBlockTask+0x98>)
 800322a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	f3bf 8f6f 	isb	sy
    }
 8003238:	e001      	b.n	800323e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800323a:	f7ff fa41 	bl	80026c0 <xTaskResumeAll>
    }
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	200001d0 	.word	0x200001d0
 800324c:	200001d4 	.word	0x200001d4
 8003250:	e000ed04 	.word	0xe000ed04

08003254 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800325c:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <prvGetNextExpireTime+0x44>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <prvGetNextExpireTime+0x16>
 8003266:	2201      	movs	r2, #1
 8003268:	e000      	b.n	800326c <prvGetNextExpireTime+0x18>
 800326a:	2200      	movs	r2, #0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d105      	bne.n	8003284 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003278:	4b07      	ldr	r3, [pc, #28]	; (8003298 <prvGetNextExpireTime+0x44>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	e001      	b.n	8003288 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003288:	68fb      	ldr	r3, [r7, #12]
    }
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	200001cc 	.word	0x200001cc

0800329c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80032a4:	f7ff faa8 	bl	80027f8 <xTaskGetTickCount>
 80032a8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <prvSampleTimeNow+0x3c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d205      	bcs.n	80032c0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80032b4:	f000 f918 	bl	80034e8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e002      	b.n	80032c6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80032c6:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <prvSampleTimeNow+0x3c>)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80032cc:	68fb      	ldr	r3, [r7, #12]
    }
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200001dc 	.word	0x200001dc

080032dc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d812      	bhi.n	8003328 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	1ad2      	subs	r2, r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	429a      	cmp	r2, r3
 800330e:	d302      	bcc.n	8003316 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003310:	2301      	movs	r3, #1
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	e01b      	b.n	800334e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003316:	4b10      	ldr	r3, [pc, #64]	; (8003358 <prvInsertTimerInActiveList+0x7c>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3304      	adds	r3, #4
 800331e:	4619      	mov	r1, r3
 8003320:	4610      	mov	r0, r2
 8003322:	f7fe faf8 	bl	8001916 <vListInsert>
 8003326:	e012      	b.n	800334e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d206      	bcs.n	800333e <prvInsertTimerInActiveList+0x62>
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d302      	bcc.n	800333e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003338:	2301      	movs	r3, #1
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	e007      	b.n	800334e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800333e:	4b07      	ldr	r3, [pc, #28]	; (800335c <prvInsertTimerInActiveList+0x80>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	3304      	adds	r3, #4
 8003346:	4619      	mov	r1, r3
 8003348:	4610      	mov	r0, r2
 800334a:	f7fe fae4 	bl	8001916 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800334e:	697b      	ldr	r3, [r7, #20]
    }
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	200001d0 	.word	0x200001d0
 800335c:	200001cc 	.word	0x200001cc

08003360 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003360:	b580      	push	{r7, lr}
 8003362:	b08c      	sub	sp, #48	; 0x30
 8003364:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003366:	e0ac      	b.n	80034c2 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	f2c0 80a8 	blt.w	80034c0 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d004      	beq.n	8003386 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	3304      	adds	r3, #4
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe fb01 	bl	8001988 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff87 	bl	800329c <prvSampleTimeNow>
 800338e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b09      	cmp	r3, #9
 8003394:	f200 8095 	bhi.w	80034c2 <prvProcessReceivedCommands+0x162>
 8003398:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <prvProcessReceivedCommands+0x40>)
 800339a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339e:	bf00      	nop
 80033a0:	080033c9 	.word	0x080033c9
 80033a4:	080033c9 	.word	0x080033c9
 80033a8:	080033c9 	.word	0x080033c9
 80033ac:	0800343b 	.word	0x0800343b
 80033b0:	0800344f 	.word	0x0800344f
 80033b4:	08003497 	.word	0x08003497
 80033b8:	080033c9 	.word	0x080033c9
 80033bc:	080033c9 	.word	0x080033c9
 80033c0:	0800343b 	.word	0x0800343b
 80033c4:	0800344f 	.word	0x0800344f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	18d1      	adds	r1, r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a3a      	ldr	r2, [r7, #32]
 80033e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033e8:	f7ff ff78 	bl	80032dc <prvInsertTimerInActiveList>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d067      	beq.n	80034c2 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033f8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d05c      	beq.n	80034c2 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	441a      	add	r2, r3
 8003410:	2300      	movs	r3, #0
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2300      	movs	r3, #0
 8003416:	2100      	movs	r1, #0
 8003418:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800341a:	f7ff fe23 	bl	8003064 <xTimerGenericCommand>
 800341e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d14d      	bne.n	80034c2 <prvProcessReceivedCommands+0x162>
 8003426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	e7fe      	b.n	8003438 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003440:	f023 0301 	bic.w	r3, r3, #1
 8003444:	b2da      	uxtb	r2, r3
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800344c:	e039      	b.n	80034c2 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003454:	f043 0301 	orr.w	r3, r3, #1
 8003458:	b2da      	uxtb	r2, r3
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <prvProcessReceivedCommands+0x122>
 800346e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	e7fe      	b.n	8003480 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	18d1      	adds	r1, r2, r3
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	6a3a      	ldr	r2, [r7, #32]
 800348e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003490:	f7ff ff24 	bl	80032dc <prvInsertTimerInActiveList>
                        break;
 8003494:	e015      	b.n	80034c2 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d103      	bne.n	80034ac <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 80034a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034a6:	f000 fbd9 	bl	8003c5c <vPortFree>
 80034aa:	e00a      	b.n	80034c2 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80034be:	e000      	b.n	80034c2 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80034c0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80034c2:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <prvProcessReceivedCommands+0x184>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f107 0108 	add.w	r1, r7, #8
 80034ca:	2200      	movs	r2, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe fd0d 	bl	8001eec <xQueueReceive>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f47f af47 	bne.w	8003368 <prvProcessReceivedCommands+0x8>
        }
    }
 80034da:	bf00      	nop
 80034dc:	3728      	adds	r7, #40	; 0x28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	200001d4 	.word	0x200001d4

080034e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80034ee:	e047      	b.n	8003580 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80034f0:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <prvSwitchTimerLists+0xc0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034fa:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <prvSwitchTimerLists+0xc0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	3304      	adds	r3, #4
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe fa3d 	bl	8001988 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d02d      	beq.n	8003580 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4413      	add	r3, r2
 800352c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	429a      	cmp	r2, r3
 8003534:	d90e      	bls.n	8003554 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003542:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <prvSwitchTimerLists+0xc0>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3304      	adds	r3, #4
 800354a:	4619      	mov	r1, r3
 800354c:	4610      	mov	r0, r2
 800354e:	f7fe f9e2 	bl	8001916 <vListInsert>
 8003552:	e015      	b.n	8003580 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003554:	2300      	movs	r3, #0
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2300      	movs	r3, #0
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	2100      	movs	r1, #0
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f7ff fd80 	bl	8003064 <xTimerGenericCommand>
 8003564:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d109      	bne.n	8003580 <prvSwitchTimerLists+0x98>
 800356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	e7fe      	b.n	800357e <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003580:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <prvSwitchTimerLists+0xc0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1b2      	bne.n	80034f0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800358a:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <prvSwitchTimerLists+0xc0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003590:	4b06      	ldr	r3, [pc, #24]	; (80035ac <prvSwitchTimerLists+0xc4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <prvSwitchTimerLists+0xc0>)
 8003596:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003598:	4a04      	ldr	r2, [pc, #16]	; (80035ac <prvSwitchTimerLists+0xc4>)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	6013      	str	r3, [r2, #0]
    }
 800359e:	bf00      	nop
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	200001cc 	.word	0x200001cc
 80035ac:	200001d0 	.word	0x200001d0

080035b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80035b4:	f000 f95c 	bl	8003870 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80035b8:	4b12      	ldr	r3, [pc, #72]	; (8003604 <prvCheckForValidListAndQueue+0x54>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d11d      	bne.n	80035fc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80035c0:	4811      	ldr	r0, [pc, #68]	; (8003608 <prvCheckForValidListAndQueue+0x58>)
 80035c2:	f7fe f957 	bl	8001874 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80035c6:	4811      	ldr	r0, [pc, #68]	; (800360c <prvCheckForValidListAndQueue+0x5c>)
 80035c8:	f7fe f954 	bl	8001874 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80035cc:	4b10      	ldr	r3, [pc, #64]	; (8003610 <prvCheckForValidListAndQueue+0x60>)
 80035ce:	4a0e      	ldr	r2, [pc, #56]	; (8003608 <prvCheckForValidListAndQueue+0x58>)
 80035d0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80035d2:	4b10      	ldr	r3, [pc, #64]	; (8003614 <prvCheckForValidListAndQueue+0x64>)
 80035d4:	4a0d      	ldr	r2, [pc, #52]	; (800360c <prvCheckForValidListAndQueue+0x5c>)
 80035d6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80035d8:	2200      	movs	r2, #0
 80035da:	210c      	movs	r1, #12
 80035dc:	200a      	movs	r0, #10
 80035de:	f7fe fa65 	bl	8001aac <xQueueGenericCreate>
 80035e2:	4602      	mov	r2, r0
 80035e4:	4b07      	ldr	r3, [pc, #28]	; (8003604 <prvCheckForValidListAndQueue+0x54>)
 80035e6:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <prvCheckForValidListAndQueue+0x54>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80035f0:	4b04      	ldr	r3, [pc, #16]	; (8003604 <prvCheckForValidListAndQueue+0x54>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4908      	ldr	r1, [pc, #32]	; (8003618 <prvCheckForValidListAndQueue+0x68>)
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe fe64 	bl	80022c4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80035fc:	f000 f966 	bl	80038cc <vPortExitCritical>
    }
 8003600:	bf00      	nop
 8003602:	bd80      	pop	{r7, pc}
 8003604:	200001d4 	.word	0x200001d4
 8003608:	200001a4 	.word	0x200001a4
 800360c:	200001b8 	.word	0x200001b8
 8003610:	200001cc 	.word	0x200001cc
 8003614:	200001d0 	.word	0x200001d0
 8003618:	08004828 	.word	0x08004828

0800361c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3b04      	subs	r3, #4
 800362c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003634:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3b04      	subs	r3, #4
 800363a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f023 0201 	bic.w	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	3b04      	subs	r3, #4
 800364a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800364c:	4a0c      	ldr	r2, [pc, #48]	; (8003680 <pxPortInitialiseStack+0x64>)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	3b14      	subs	r3, #20
 8003656:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3b04      	subs	r3, #4
 8003662:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f06f 0202 	mvn.w	r2, #2
 800366a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3b20      	subs	r3, #32
 8003670:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003672:	68fb      	ldr	r3, [r7, #12]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	08003685 	.word	0x08003685

08003684 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <prvTaskExitError+0x50>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003696:	d009      	beq.n	80036ac <prvTaskExitError+0x28>
 8003698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369c:	f383 8811 	msr	BASEPRI, r3
 80036a0:	f3bf 8f6f 	isb	sy
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	e7fe      	b.n	80036aa <prvTaskExitError+0x26>
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	f383 8811 	msr	BASEPRI, r3
 80036b4:	f3bf 8f6f 	isb	sy
 80036b8:	f3bf 8f4f 	dsb	sy
 80036bc:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80036be:	bf00      	nop
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0fc      	beq.n	80036c0 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80036c6:	bf00      	nop
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000010 	.word	0x20000010
	...

080036e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <pxCurrentTCBConst2>)
 80036e2:	6819      	ldr	r1, [r3, #0]
 80036e4:	6808      	ldr	r0, [r1, #0]
 80036e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ea:	f380 8809 	msr	PSP, r0
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f04f 0000 	mov.w	r0, #0
 80036f6:	f380 8811 	msr	BASEPRI, r0
 80036fa:	4770      	bx	lr
 80036fc:	f3af 8000 	nop.w

08003700 <pxCurrentTCBConst2>:
 8003700:	200000a0 	.word	0x200000a0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop

08003708 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003708:	4808      	ldr	r0, [pc, #32]	; (800372c <prvPortStartFirstTask+0x24>)
 800370a:	6800      	ldr	r0, [r0, #0]
 800370c:	6800      	ldr	r0, [r0, #0]
 800370e:	f380 8808 	msr	MSP, r0
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f380 8814 	msr	CONTROL, r0
 800371a:	b662      	cpsie	i
 800371c:	b661      	cpsie	f
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	df00      	svc	0
 8003728:	bf00      	nop
 800372a:	0000      	.short	0x0000
 800372c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003730:	bf00      	nop
 8003732:	bf00      	nop

08003734 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800373a:	4b44      	ldr	r3, [pc, #272]	; (800384c <xPortStartScheduler+0x118>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a44      	ldr	r2, [pc, #272]	; (8003850 <xPortStartScheduler+0x11c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d109      	bne.n	8003758 <xPortStartScheduler+0x24>
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	613b      	str	r3, [r7, #16]
 8003756:	e7fe      	b.n	8003756 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003758:	4b3c      	ldr	r3, [pc, #240]	; (800384c <xPortStartScheduler+0x118>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a3d      	ldr	r2, [pc, #244]	; (8003854 <xPortStartScheduler+0x120>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d109      	bne.n	8003776 <xPortStartScheduler+0x42>
 8003762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e7fe      	b.n	8003774 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003776:	4b38      	ldr	r3, [pc, #224]	; (8003858 <xPortStartScheduler+0x124>)
 8003778:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	22ff      	movs	r2, #255	; 0xff
 8003786:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003798:	b2da      	uxtb	r2, r3
 800379a:	4b30      	ldr	r3, [pc, #192]	; (800385c <xPortStartScheduler+0x128>)
 800379c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800379e:	4b30      	ldr	r3, [pc, #192]	; (8003860 <xPortStartScheduler+0x12c>)
 80037a0:	2207      	movs	r2, #7
 80037a2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037a4:	e009      	b.n	80037ba <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 80037a6:	4b2e      	ldr	r3, [pc, #184]	; (8003860 <xPortStartScheduler+0x12c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	4a2c      	ldr	r2, [pc, #176]	; (8003860 <xPortStartScheduler+0x12c>)
 80037ae:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c2:	2b80      	cmp	r3, #128	; 0x80
 80037c4:	d0ef      	beq.n	80037a6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80037c6:	4b26      	ldr	r3, [pc, #152]	; (8003860 <xPortStartScheduler+0x12c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f1c3 0307 	rsb	r3, r3, #7
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d009      	beq.n	80037e6 <xPortStartScheduler+0xb2>
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	e7fe      	b.n	80037e4 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037e6:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <xPortStartScheduler+0x12c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	021b      	lsls	r3, r3, #8
 80037ec:	4a1c      	ldr	r2, [pc, #112]	; (8003860 <xPortStartScheduler+0x12c>)
 80037ee:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <xPortStartScheduler+0x12c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037f8:	4a19      	ldr	r2, [pc, #100]	; (8003860 <xPortStartScheduler+0x12c>)
 80037fa:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003804:	4b17      	ldr	r3, [pc, #92]	; (8003864 <xPortStartScheduler+0x130>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a16      	ldr	r2, [pc, #88]	; (8003864 <xPortStartScheduler+0x130>)
 800380a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800380e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003810:	4b14      	ldr	r3, [pc, #80]	; (8003864 <xPortStartScheduler+0x130>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a13      	ldr	r2, [pc, #76]	; (8003864 <xPortStartScheduler+0x130>)
 8003816:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800381a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800381c:	f000 f8d4 	bl	80039c8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003820:	4b11      	ldr	r3, [pc, #68]	; (8003868 <xPortStartScheduler+0x134>)
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003826:	f000 f8f3 	bl	8003a10 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800382a:	4b10      	ldr	r3, [pc, #64]	; (800386c <xPortStartScheduler+0x138>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a0f      	ldr	r2, [pc, #60]	; (800386c <xPortStartScheduler+0x138>)
 8003830:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003834:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003836:	f7ff ff67 	bl	8003708 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800383a:	f7ff f8a5 	bl	8002988 <vTaskSwitchContext>
    prvTaskExitError();
 800383e:	f7ff ff21 	bl	8003684 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	e000ed00 	.word	0xe000ed00
 8003850:	410fc271 	.word	0x410fc271
 8003854:	410fc270 	.word	0x410fc270
 8003858:	e000e400 	.word	0xe000e400
 800385c:	200001e0 	.word	0x200001e0
 8003860:	200001e4 	.word	0x200001e4
 8003864:	e000ed20 	.word	0xe000ed20
 8003868:	20000010 	.word	0x20000010
 800386c:	e000ef34 	.word	0xe000ef34

08003870 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003888:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <vPortEnterCritical+0x54>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3301      	adds	r3, #1
 800388e:	4a0d      	ldr	r2, [pc, #52]	; (80038c4 <vPortEnterCritical+0x54>)
 8003890:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003892:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <vPortEnterCritical+0x54>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d10e      	bne.n	80038b8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <vPortEnterCritical+0x58>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d009      	beq.n	80038b8 <vPortEnterCritical+0x48>
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	e7fe      	b.n	80038b6 <vPortEnterCritical+0x46>
    }
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	20000010 	.word	0x20000010
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80038d2:	4b11      	ldr	r3, [pc, #68]	; (8003918 <vPortExitCritical+0x4c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <vPortExitCritical+0x22>
 80038da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	e7fe      	b.n	80038ec <vPortExitCritical+0x20>
    uxCriticalNesting--;
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <vPortExitCritical+0x4c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	4a08      	ldr	r2, [pc, #32]	; (8003918 <vPortExitCritical+0x4c>)
 80038f6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80038f8:	4b07      	ldr	r3, [pc, #28]	; (8003918 <vPortExitCritical+0x4c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d104      	bne.n	800390a <vPortExitCritical+0x3e>
 8003900:	2300      	movs	r3, #0
 8003902:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000010 	.word	0x20000010
 800391c:	00000000 	.word	0x00000000

08003920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003920:	f3ef 8009 	mrs	r0, PSP
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	4b15      	ldr	r3, [pc, #84]	; (8003980 <pxCurrentTCBConst>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	f01e 0f10 	tst.w	lr, #16
 8003930:	bf08      	it	eq
 8003932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800393a:	6010      	str	r0, [r2, #0]
 800393c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003944:	f380 8811 	msr	BASEPRI, r0
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f7ff f81a 	bl	8002988 <vTaskSwitchContext>
 8003954:	f04f 0000 	mov.w	r0, #0
 8003958:	f380 8811 	msr	BASEPRI, r0
 800395c:	bc09      	pop	{r0, r3}
 800395e:	6819      	ldr	r1, [r3, #0]
 8003960:	6808      	ldr	r0, [r1, #0]
 8003962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003966:	f01e 0f10 	tst.w	lr, #16
 800396a:	bf08      	it	eq
 800396c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003970:	f380 8809 	msr	PSP, r0
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	f3af 8000 	nop.w

08003980 <pxCurrentTCBConst>:
 8003980:	200000a0 	.word	0x200000a0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003984:	bf00      	nop
 8003986:	bf00      	nop

08003988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
        __asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80039a0:	f7fe ff3a 	bl	8002818 <xTaskIncrementTick>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <SysTick_Handler+0x3c>)
 80039ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	2300      	movs	r3, #0
 80039b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80039bc:	bf00      	nop
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	e000ed04 	.word	0xe000ed04

080039c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <vPortSetupTimerInterrupt+0x34>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80039d2:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <vPortSetupTimerInterrupt+0x38>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039d8:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <vPortSetupTimerInterrupt+0x3c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <vPortSetupTimerInterrupt+0x40>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	099b      	lsrs	r3, r3, #6
 80039e4:	4a09      	ldr	r2, [pc, #36]	; (8003a0c <vPortSetupTimerInterrupt+0x44>)
 80039e6:	3b01      	subs	r3, #1
 80039e8:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80039ea:	4b04      	ldr	r3, [pc, #16]	; (80039fc <vPortSetupTimerInterrupt+0x34>)
 80039ec:	2207      	movs	r2, #7
 80039ee:	601a      	str	r2, [r3, #0]
}
 80039f0:	bf00      	nop
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000e010 	.word	0xe000e010
 8003a00:	e000e018 	.word	0xe000e018
 8003a04:	20000000 	.word	0x20000000
 8003a08:	10624dd3 	.word	0x10624dd3
 8003a0c:	e000e014 	.word	0xe000e014

08003a10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003a10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003a20 <vPortEnableVFP+0x10>
 8003a14:	6801      	ldr	r1, [r0, #0]
 8003a16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a1a:	6001      	str	r1, [r0, #0]
 8003a1c:	4770      	bx	lr
 8003a1e:	0000      	.short	0x0000
 8003a20:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003a24:	bf00      	nop
 8003a26:	bf00      	nop

08003a28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003a2e:	f3ef 8305 	mrs	r3, IPSR
 8003a32:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b0f      	cmp	r3, #15
 8003a38:	d913      	bls.n	8003a62 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003a3a:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <vPortValidateInterruptPriority+0x6c>)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4413      	add	r3, r2
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003a44:	4b14      	ldr	r3, [pc, #80]	; (8003a98 <vPortValidateInterruptPriority+0x70>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	7afa      	ldrb	r2, [r7, #11]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d209      	bcs.n	8003a62 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8003a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	607b      	str	r3, [r7, #4]
 8003a60:	e7fe      	b.n	8003a60 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003a62:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <vPortValidateInterruptPriority+0x74>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <vPortValidateInterruptPriority+0x78>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d909      	bls.n	8003a86 <vPortValidateInterruptPriority+0x5e>
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	e7fe      	b.n	8003a84 <vPortValidateInterruptPriority+0x5c>
    }
 8003a86:	bf00      	nop
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	e000e3f0 	.word	0xe000e3f0
 8003a98:	200001e0 	.word	0x200001e0
 8003a9c:	e000ed0c 	.word	0xe000ed0c
 8003aa0:	200001e4 	.word	0x200001e4

08003aa4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08a      	sub	sp, #40	; 0x28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003ab0:	f7fe fdf8 	bl	80026a4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003ab4:	4b63      	ldr	r3, [pc, #396]	; (8003c44 <pvPortMalloc+0x1a0>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003abc:	f000 f92e 	bl	8003d1c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ac0:	4b61      	ldr	r3, [pc, #388]	; (8003c48 <pvPortMalloc+0x1a4>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f040 80a5 	bne.w	8003c18 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d02c      	beq.n	8003b2e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003ad4:	2208      	movs	r2, #8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d226      	bcs.n	8003b2e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d020      	beq.n	8003b34 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f023 0307 	bic.w	r3, r3, #7
 8003af8:	3308      	adds	r3, #8
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d213      	bcs.n	8003b28 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f023 0307 	bic.w	r3, r3, #7
 8003b06:	3308      	adds	r3, #8
 8003b08:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00f      	beq.n	8003b34 <pvPortMalloc+0x90>
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	e7fe      	b.n	8003b26 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b2c:	e002      	b.n	8003b34 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	607b      	str	r3, [r7, #4]
 8003b32:	e000      	b.n	8003b36 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b34:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d06d      	beq.n	8003c18 <pvPortMalloc+0x174>
 8003b3c:	4b43      	ldr	r3, [pc, #268]	; (8003c4c <pvPortMalloc+0x1a8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d868      	bhi.n	8003c18 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003b46:	4b42      	ldr	r3, [pc, #264]	; (8003c50 <pvPortMalloc+0x1ac>)
 8003b48:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003b4a:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <pvPortMalloc+0x1ac>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b50:	e004      	b.n	8003b5c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d903      	bls.n	8003b6e <pvPortMalloc+0xca>
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f1      	bne.n	8003b52 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003b6e:	4b35      	ldr	r3, [pc, #212]	; (8003c44 <pvPortMalloc+0x1a0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d04f      	beq.n	8003c18 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2208      	movs	r2, #8
 8003b7e:	4413      	add	r3, r2
 8003b80:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	1ad2      	subs	r2, r2, r3
 8003b92:	2308      	movs	r3, #8
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d91e      	bls.n	8003bd8 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d009      	beq.n	8003bc0 <pvPortMalloc+0x11c>
 8003bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	e7fe      	b.n	8003bbe <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	1ad2      	subs	r2, r2, r3
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003bd2:	69b8      	ldr	r0, [r7, #24]
 8003bd4:	f000 f904 	bl	8003de0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003bd8:	4b1c      	ldr	r3, [pc, #112]	; (8003c4c <pvPortMalloc+0x1a8>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	4a1a      	ldr	r2, [pc, #104]	; (8003c4c <pvPortMalloc+0x1a8>)
 8003be4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003be6:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <pvPortMalloc+0x1a8>)
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <pvPortMalloc+0x1b0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d203      	bcs.n	8003bfa <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <pvPortMalloc+0x1a8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <pvPortMalloc+0x1b0>)
 8003bf8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <pvPortMalloc+0x1a4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003c0e:	4b12      	ldr	r3, [pc, #72]	; (8003c58 <pvPortMalloc+0x1b4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3301      	adds	r3, #1
 8003c14:	4a10      	ldr	r2, [pc, #64]	; (8003c58 <pvPortMalloc+0x1b4>)
 8003c16:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003c18:	f7fe fd52 	bl	80026c0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <pvPortMalloc+0x196>
 8003c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2a:	f383 8811 	msr	BASEPRI, r3
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f3bf 8f4f 	dsb	sy
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	e7fe      	b.n	8003c38 <pvPortMalloc+0x194>
    return pvReturn;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3728      	adds	r7, #40	; 0x28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20012df0 	.word	0x20012df0
 8003c48:	20012e04 	.word	0x20012e04
 8003c4c:	20012df4 	.word	0x20012df4
 8003c50:	20012de8 	.word	0x20012de8
 8003c54:	20012df8 	.word	0x20012df8
 8003c58:	20012dfc 	.word	0x20012dfc

08003c5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d04b      	beq.n	8003d06 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003c6e:	2308      	movs	r3, #8
 8003c70:	425b      	negs	r3, r3
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4413      	add	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	4b23      	ldr	r3, [pc, #140]	; (8003d10 <vPortFree+0xb4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <vPortFree+0x42>
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	e7fe      	b.n	8003c9c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <vPortFree+0x5e>
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	e7fe      	b.n	8003cb8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <vPortFree+0xb4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01e      	beq.n	8003d06 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d11a      	bne.n	8003d06 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <vPortFree+0xb4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	401a      	ands	r2, r3
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003ce0:	f7fe fce0 	bl	80026a4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <vPortFree+0xb8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4413      	add	r3, r2
 8003cee:	4a09      	ldr	r2, [pc, #36]	; (8003d14 <vPortFree+0xb8>)
 8003cf0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003cf2:	6938      	ldr	r0, [r7, #16]
 8003cf4:	f000 f874 	bl	8003de0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003cf8:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <vPortFree+0xbc>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	4a06      	ldr	r2, [pc, #24]	; (8003d18 <vPortFree+0xbc>)
 8003d00:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003d02:	f7fe fcdd 	bl	80026c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003d06:	bf00      	nop
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20012e04 	.word	0x20012e04
 8003d14:	20012df4 	.word	0x20012df4
 8003d18:	20012e00 	.word	0x20012e00

08003d1c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d22:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003d26:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003d28:	4b27      	ldr	r3, [pc, #156]	; (8003dc8 <prvHeapInit+0xac>)
 8003d2a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00c      	beq.n	8003d50 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3307      	adds	r3, #7
 8003d3a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0307 	bic.w	r3, r3, #7
 8003d42:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	4a1f      	ldr	r2, [pc, #124]	; (8003dc8 <prvHeapInit+0xac>)
 8003d4c:	4413      	add	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d54:	4a1d      	ldr	r2, [pc, #116]	; (8003dcc <prvHeapInit+0xb0>)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003d5a:	4b1c      	ldr	r3, [pc, #112]	; (8003dcc <prvHeapInit+0xb0>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	4413      	add	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003d68:	2208      	movs	r2, #8
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0307 	bic.w	r3, r3, #7
 8003d76:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4a15      	ldr	r2, [pc, #84]	; (8003dd0 <prvHeapInit+0xb4>)
 8003d7c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003d7e:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <prvHeapInit+0xb4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2200      	movs	r2, #0
 8003d84:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003d86:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <prvHeapInit+0xb4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	1ad2      	subs	r2, r2, r3
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <prvHeapInit+0xb4>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <prvHeapInit+0xb8>)
 8003daa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <prvHeapInit+0xbc>)
 8003db2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <prvHeapInit+0xc0>)
 8003db6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003dba:	601a      	str	r2, [r3, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	200001e8 	.word	0x200001e8
 8003dcc:	20012de8 	.word	0x20012de8
 8003dd0:	20012df0 	.word	0x20012df0
 8003dd4:	20012df8 	.word	0x20012df8
 8003dd8:	20012df4 	.word	0x20012df4
 8003ddc:	20012e04 	.word	0x20012e04

08003de0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003de8:	4b28      	ldr	r3, [pc, #160]	; (8003e8c <prvInsertBlockIntoFreeList+0xac>)
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	e002      	b.n	8003df4 <prvInsertBlockIntoFreeList+0x14>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d8f7      	bhi.n	8003dee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	4413      	add	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d108      	bne.n	8003e22 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	441a      	add	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	441a      	add	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d118      	bne.n	8003e68 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <prvInsertBlockIntoFreeList+0xb0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d00d      	beq.n	8003e5e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	441a      	add	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	e008      	b.n	8003e70 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e5e:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <prvInsertBlockIntoFreeList+0xb0>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e003      	b.n	8003e70 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d002      	beq.n	8003e7e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20012de8 	.word	0x20012de8
 8003e90:	20012df0 	.word	0x20012df0

08003e94 <__errno>:
 8003e94:	4b01      	ldr	r3, [pc, #4]	; (8003e9c <__errno+0x8>)
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	20000014 	.word	0x20000014

08003ea0 <__libc_init_array>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	4e0d      	ldr	r6, [pc, #52]	; (8003ed8 <__libc_init_array+0x38>)
 8003ea4:	4c0d      	ldr	r4, [pc, #52]	; (8003edc <__libc_init_array+0x3c>)
 8003ea6:	1ba4      	subs	r4, r4, r6
 8003ea8:	10a4      	asrs	r4, r4, #2
 8003eaa:	2500      	movs	r5, #0
 8003eac:	42a5      	cmp	r5, r4
 8003eae:	d109      	bne.n	8003ec4 <__libc_init_array+0x24>
 8003eb0:	4e0b      	ldr	r6, [pc, #44]	; (8003ee0 <__libc_init_array+0x40>)
 8003eb2:	4c0c      	ldr	r4, [pc, #48]	; (8003ee4 <__libc_init_array+0x44>)
 8003eb4:	f000 fc94 	bl	80047e0 <_init>
 8003eb8:	1ba4      	subs	r4, r4, r6
 8003eba:	10a4      	asrs	r4, r4, #2
 8003ebc:	2500      	movs	r5, #0
 8003ebe:	42a5      	cmp	r5, r4
 8003ec0:	d105      	bne.n	8003ece <__libc_init_array+0x2e>
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
 8003ec4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ec8:	4798      	blx	r3
 8003eca:	3501      	adds	r5, #1
 8003ecc:	e7ee      	b.n	8003eac <__libc_init_array+0xc>
 8003ece:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ed2:	4798      	blx	r3
 8003ed4:	3501      	adds	r5, #1
 8003ed6:	e7f2      	b.n	8003ebe <__libc_init_array+0x1e>
 8003ed8:	080048b4 	.word	0x080048b4
 8003edc:	080048b4 	.word	0x080048b4
 8003ee0:	080048b4 	.word	0x080048b4
 8003ee4:	080048b8 	.word	0x080048b8

08003ee8 <memcpy>:
 8003ee8:	b510      	push	{r4, lr}
 8003eea:	1e43      	subs	r3, r0, #1
 8003eec:	440a      	add	r2, r1
 8003eee:	4291      	cmp	r1, r2
 8003ef0:	d100      	bne.n	8003ef4 <memcpy+0xc>
 8003ef2:	bd10      	pop	{r4, pc}
 8003ef4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ef8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003efc:	e7f7      	b.n	8003eee <memcpy+0x6>

08003efe <memset>:
 8003efe:	4402      	add	r2, r0
 8003f00:	4603      	mov	r3, r0
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d100      	bne.n	8003f08 <memset+0xa>
 8003f06:	4770      	bx	lr
 8003f08:	f803 1b01 	strb.w	r1, [r3], #1
 8003f0c:	e7f9      	b.n	8003f02 <memset+0x4>
	...

08003f10 <_puts_r>:
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	460e      	mov	r6, r1
 8003f14:	4605      	mov	r5, r0
 8003f16:	b118      	cbz	r0, 8003f20 <_puts_r+0x10>
 8003f18:	6983      	ldr	r3, [r0, #24]
 8003f1a:	b90b      	cbnz	r3, 8003f20 <_puts_r+0x10>
 8003f1c:	f000 fa0c 	bl	8004338 <__sinit>
 8003f20:	69ab      	ldr	r3, [r5, #24]
 8003f22:	68ac      	ldr	r4, [r5, #8]
 8003f24:	b913      	cbnz	r3, 8003f2c <_puts_r+0x1c>
 8003f26:	4628      	mov	r0, r5
 8003f28:	f000 fa06 	bl	8004338 <__sinit>
 8003f2c:	4b23      	ldr	r3, [pc, #140]	; (8003fbc <_puts_r+0xac>)
 8003f2e:	429c      	cmp	r4, r3
 8003f30:	d117      	bne.n	8003f62 <_puts_r+0x52>
 8003f32:	686c      	ldr	r4, [r5, #4]
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	071b      	lsls	r3, r3, #28
 8003f38:	d51d      	bpl.n	8003f76 <_puts_r+0x66>
 8003f3a:	6923      	ldr	r3, [r4, #16]
 8003f3c:	b1db      	cbz	r3, 8003f76 <_puts_r+0x66>
 8003f3e:	3e01      	subs	r6, #1
 8003f40:	68a3      	ldr	r3, [r4, #8]
 8003f42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f46:	3b01      	subs	r3, #1
 8003f48:	60a3      	str	r3, [r4, #8]
 8003f4a:	b9e9      	cbnz	r1, 8003f88 <_puts_r+0x78>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	da2e      	bge.n	8003fae <_puts_r+0x9e>
 8003f50:	4622      	mov	r2, r4
 8003f52:	210a      	movs	r1, #10
 8003f54:	4628      	mov	r0, r5
 8003f56:	f000 f83f 	bl	8003fd8 <__swbuf_r>
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d011      	beq.n	8003f82 <_puts_r+0x72>
 8003f5e:	200a      	movs	r0, #10
 8003f60:	e011      	b.n	8003f86 <_puts_r+0x76>
 8003f62:	4b17      	ldr	r3, [pc, #92]	; (8003fc0 <_puts_r+0xb0>)
 8003f64:	429c      	cmp	r4, r3
 8003f66:	d101      	bne.n	8003f6c <_puts_r+0x5c>
 8003f68:	68ac      	ldr	r4, [r5, #8]
 8003f6a:	e7e3      	b.n	8003f34 <_puts_r+0x24>
 8003f6c:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <_puts_r+0xb4>)
 8003f6e:	429c      	cmp	r4, r3
 8003f70:	bf08      	it	eq
 8003f72:	68ec      	ldreq	r4, [r5, #12]
 8003f74:	e7de      	b.n	8003f34 <_puts_r+0x24>
 8003f76:	4621      	mov	r1, r4
 8003f78:	4628      	mov	r0, r5
 8003f7a:	f000 f87f 	bl	800407c <__swsetup_r>
 8003f7e:	2800      	cmp	r0, #0
 8003f80:	d0dd      	beq.n	8003f3e <_puts_r+0x2e>
 8003f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f86:	bd70      	pop	{r4, r5, r6, pc}
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	da04      	bge.n	8003f96 <_puts_r+0x86>
 8003f8c:	69a2      	ldr	r2, [r4, #24]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	dc06      	bgt.n	8003fa0 <_puts_r+0x90>
 8003f92:	290a      	cmp	r1, #10
 8003f94:	d004      	beq.n	8003fa0 <_puts_r+0x90>
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	6022      	str	r2, [r4, #0]
 8003f9c:	7019      	strb	r1, [r3, #0]
 8003f9e:	e7cf      	b.n	8003f40 <_puts_r+0x30>
 8003fa0:	4622      	mov	r2, r4
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	f000 f818 	bl	8003fd8 <__swbuf_r>
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d1c9      	bne.n	8003f40 <_puts_r+0x30>
 8003fac:	e7e9      	b.n	8003f82 <_puts_r+0x72>
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	200a      	movs	r0, #10
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	6022      	str	r2, [r4, #0]
 8003fb6:	7018      	strb	r0, [r3, #0]
 8003fb8:	e7e5      	b.n	8003f86 <_puts_r+0x76>
 8003fba:	bf00      	nop
 8003fbc:	0800486c 	.word	0x0800486c
 8003fc0:	0800488c 	.word	0x0800488c
 8003fc4:	0800484c 	.word	0x0800484c

08003fc8 <puts>:
 8003fc8:	4b02      	ldr	r3, [pc, #8]	; (8003fd4 <puts+0xc>)
 8003fca:	4601      	mov	r1, r0
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	f7ff bf9f 	b.w	8003f10 <_puts_r>
 8003fd2:	bf00      	nop
 8003fd4:	20000014 	.word	0x20000014

08003fd8 <__swbuf_r>:
 8003fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fda:	460e      	mov	r6, r1
 8003fdc:	4614      	mov	r4, r2
 8003fde:	4605      	mov	r5, r0
 8003fe0:	b118      	cbz	r0, 8003fea <__swbuf_r+0x12>
 8003fe2:	6983      	ldr	r3, [r0, #24]
 8003fe4:	b90b      	cbnz	r3, 8003fea <__swbuf_r+0x12>
 8003fe6:	f000 f9a7 	bl	8004338 <__sinit>
 8003fea:	4b21      	ldr	r3, [pc, #132]	; (8004070 <__swbuf_r+0x98>)
 8003fec:	429c      	cmp	r4, r3
 8003fee:	d12a      	bne.n	8004046 <__swbuf_r+0x6e>
 8003ff0:	686c      	ldr	r4, [r5, #4]
 8003ff2:	69a3      	ldr	r3, [r4, #24]
 8003ff4:	60a3      	str	r3, [r4, #8]
 8003ff6:	89a3      	ldrh	r3, [r4, #12]
 8003ff8:	071a      	lsls	r2, r3, #28
 8003ffa:	d52e      	bpl.n	800405a <__swbuf_r+0x82>
 8003ffc:	6923      	ldr	r3, [r4, #16]
 8003ffe:	b363      	cbz	r3, 800405a <__swbuf_r+0x82>
 8004000:	6923      	ldr	r3, [r4, #16]
 8004002:	6820      	ldr	r0, [r4, #0]
 8004004:	1ac0      	subs	r0, r0, r3
 8004006:	6963      	ldr	r3, [r4, #20]
 8004008:	b2f6      	uxtb	r6, r6
 800400a:	4283      	cmp	r3, r0
 800400c:	4637      	mov	r7, r6
 800400e:	dc04      	bgt.n	800401a <__swbuf_r+0x42>
 8004010:	4621      	mov	r1, r4
 8004012:	4628      	mov	r0, r5
 8004014:	f000 f926 	bl	8004264 <_fflush_r>
 8004018:	bb28      	cbnz	r0, 8004066 <__swbuf_r+0x8e>
 800401a:	68a3      	ldr	r3, [r4, #8]
 800401c:	3b01      	subs	r3, #1
 800401e:	60a3      	str	r3, [r4, #8]
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	6022      	str	r2, [r4, #0]
 8004026:	701e      	strb	r6, [r3, #0]
 8004028:	6963      	ldr	r3, [r4, #20]
 800402a:	3001      	adds	r0, #1
 800402c:	4283      	cmp	r3, r0
 800402e:	d004      	beq.n	800403a <__swbuf_r+0x62>
 8004030:	89a3      	ldrh	r3, [r4, #12]
 8004032:	07db      	lsls	r3, r3, #31
 8004034:	d519      	bpl.n	800406a <__swbuf_r+0x92>
 8004036:	2e0a      	cmp	r6, #10
 8004038:	d117      	bne.n	800406a <__swbuf_r+0x92>
 800403a:	4621      	mov	r1, r4
 800403c:	4628      	mov	r0, r5
 800403e:	f000 f911 	bl	8004264 <_fflush_r>
 8004042:	b190      	cbz	r0, 800406a <__swbuf_r+0x92>
 8004044:	e00f      	b.n	8004066 <__swbuf_r+0x8e>
 8004046:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <__swbuf_r+0x9c>)
 8004048:	429c      	cmp	r4, r3
 800404a:	d101      	bne.n	8004050 <__swbuf_r+0x78>
 800404c:	68ac      	ldr	r4, [r5, #8]
 800404e:	e7d0      	b.n	8003ff2 <__swbuf_r+0x1a>
 8004050:	4b09      	ldr	r3, [pc, #36]	; (8004078 <__swbuf_r+0xa0>)
 8004052:	429c      	cmp	r4, r3
 8004054:	bf08      	it	eq
 8004056:	68ec      	ldreq	r4, [r5, #12]
 8004058:	e7cb      	b.n	8003ff2 <__swbuf_r+0x1a>
 800405a:	4621      	mov	r1, r4
 800405c:	4628      	mov	r0, r5
 800405e:	f000 f80d 	bl	800407c <__swsetup_r>
 8004062:	2800      	cmp	r0, #0
 8004064:	d0cc      	beq.n	8004000 <__swbuf_r+0x28>
 8004066:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800406a:	4638      	mov	r0, r7
 800406c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800406e:	bf00      	nop
 8004070:	0800486c 	.word	0x0800486c
 8004074:	0800488c 	.word	0x0800488c
 8004078:	0800484c 	.word	0x0800484c

0800407c <__swsetup_r>:
 800407c:	4b32      	ldr	r3, [pc, #200]	; (8004148 <__swsetup_r+0xcc>)
 800407e:	b570      	push	{r4, r5, r6, lr}
 8004080:	681d      	ldr	r5, [r3, #0]
 8004082:	4606      	mov	r6, r0
 8004084:	460c      	mov	r4, r1
 8004086:	b125      	cbz	r5, 8004092 <__swsetup_r+0x16>
 8004088:	69ab      	ldr	r3, [r5, #24]
 800408a:	b913      	cbnz	r3, 8004092 <__swsetup_r+0x16>
 800408c:	4628      	mov	r0, r5
 800408e:	f000 f953 	bl	8004338 <__sinit>
 8004092:	4b2e      	ldr	r3, [pc, #184]	; (800414c <__swsetup_r+0xd0>)
 8004094:	429c      	cmp	r4, r3
 8004096:	d10f      	bne.n	80040b8 <__swsetup_r+0x3c>
 8004098:	686c      	ldr	r4, [r5, #4]
 800409a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800409e:	b29a      	uxth	r2, r3
 80040a0:	0715      	lsls	r5, r2, #28
 80040a2:	d42c      	bmi.n	80040fe <__swsetup_r+0x82>
 80040a4:	06d0      	lsls	r0, r2, #27
 80040a6:	d411      	bmi.n	80040cc <__swsetup_r+0x50>
 80040a8:	2209      	movs	r2, #9
 80040aa:	6032      	str	r2, [r6, #0]
 80040ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b0:	81a3      	strh	r3, [r4, #12]
 80040b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040b6:	e03e      	b.n	8004136 <__swsetup_r+0xba>
 80040b8:	4b25      	ldr	r3, [pc, #148]	; (8004150 <__swsetup_r+0xd4>)
 80040ba:	429c      	cmp	r4, r3
 80040bc:	d101      	bne.n	80040c2 <__swsetup_r+0x46>
 80040be:	68ac      	ldr	r4, [r5, #8]
 80040c0:	e7eb      	b.n	800409a <__swsetup_r+0x1e>
 80040c2:	4b24      	ldr	r3, [pc, #144]	; (8004154 <__swsetup_r+0xd8>)
 80040c4:	429c      	cmp	r4, r3
 80040c6:	bf08      	it	eq
 80040c8:	68ec      	ldreq	r4, [r5, #12]
 80040ca:	e7e6      	b.n	800409a <__swsetup_r+0x1e>
 80040cc:	0751      	lsls	r1, r2, #29
 80040ce:	d512      	bpl.n	80040f6 <__swsetup_r+0x7a>
 80040d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040d2:	b141      	cbz	r1, 80040e6 <__swsetup_r+0x6a>
 80040d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040d8:	4299      	cmp	r1, r3
 80040da:	d002      	beq.n	80040e2 <__swsetup_r+0x66>
 80040dc:	4630      	mov	r0, r6
 80040de:	f000 fa19 	bl	8004514 <_free_r>
 80040e2:	2300      	movs	r3, #0
 80040e4:	6363      	str	r3, [r4, #52]	; 0x34
 80040e6:	89a3      	ldrh	r3, [r4, #12]
 80040e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040ec:	81a3      	strh	r3, [r4, #12]
 80040ee:	2300      	movs	r3, #0
 80040f0:	6063      	str	r3, [r4, #4]
 80040f2:	6923      	ldr	r3, [r4, #16]
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	89a3      	ldrh	r3, [r4, #12]
 80040f8:	f043 0308 	orr.w	r3, r3, #8
 80040fc:	81a3      	strh	r3, [r4, #12]
 80040fe:	6923      	ldr	r3, [r4, #16]
 8004100:	b94b      	cbnz	r3, 8004116 <__swsetup_r+0x9a>
 8004102:	89a3      	ldrh	r3, [r4, #12]
 8004104:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800410c:	d003      	beq.n	8004116 <__swsetup_r+0x9a>
 800410e:	4621      	mov	r1, r4
 8004110:	4630      	mov	r0, r6
 8004112:	f000 f9bf 	bl	8004494 <__smakebuf_r>
 8004116:	89a2      	ldrh	r2, [r4, #12]
 8004118:	f012 0301 	ands.w	r3, r2, #1
 800411c:	d00c      	beq.n	8004138 <__swsetup_r+0xbc>
 800411e:	2300      	movs	r3, #0
 8004120:	60a3      	str	r3, [r4, #8]
 8004122:	6963      	ldr	r3, [r4, #20]
 8004124:	425b      	negs	r3, r3
 8004126:	61a3      	str	r3, [r4, #24]
 8004128:	6923      	ldr	r3, [r4, #16]
 800412a:	b953      	cbnz	r3, 8004142 <__swsetup_r+0xc6>
 800412c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004130:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004134:	d1ba      	bne.n	80040ac <__swsetup_r+0x30>
 8004136:	bd70      	pop	{r4, r5, r6, pc}
 8004138:	0792      	lsls	r2, r2, #30
 800413a:	bf58      	it	pl
 800413c:	6963      	ldrpl	r3, [r4, #20]
 800413e:	60a3      	str	r3, [r4, #8]
 8004140:	e7f2      	b.n	8004128 <__swsetup_r+0xac>
 8004142:	2000      	movs	r0, #0
 8004144:	e7f7      	b.n	8004136 <__swsetup_r+0xba>
 8004146:	bf00      	nop
 8004148:	20000014 	.word	0x20000014
 800414c:	0800486c 	.word	0x0800486c
 8004150:	0800488c 	.word	0x0800488c
 8004154:	0800484c 	.word	0x0800484c

08004158 <__sflush_r>:
 8004158:	898a      	ldrh	r2, [r1, #12]
 800415a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800415e:	4605      	mov	r5, r0
 8004160:	0710      	lsls	r0, r2, #28
 8004162:	460c      	mov	r4, r1
 8004164:	d458      	bmi.n	8004218 <__sflush_r+0xc0>
 8004166:	684b      	ldr	r3, [r1, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	dc05      	bgt.n	8004178 <__sflush_r+0x20>
 800416c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	dc02      	bgt.n	8004178 <__sflush_r+0x20>
 8004172:	2000      	movs	r0, #0
 8004174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800417a:	2e00      	cmp	r6, #0
 800417c:	d0f9      	beq.n	8004172 <__sflush_r+0x1a>
 800417e:	2300      	movs	r3, #0
 8004180:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004184:	682f      	ldr	r7, [r5, #0]
 8004186:	6a21      	ldr	r1, [r4, #32]
 8004188:	602b      	str	r3, [r5, #0]
 800418a:	d032      	beq.n	80041f2 <__sflush_r+0x9a>
 800418c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800418e:	89a3      	ldrh	r3, [r4, #12]
 8004190:	075a      	lsls	r2, r3, #29
 8004192:	d505      	bpl.n	80041a0 <__sflush_r+0x48>
 8004194:	6863      	ldr	r3, [r4, #4]
 8004196:	1ac0      	subs	r0, r0, r3
 8004198:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800419a:	b10b      	cbz	r3, 80041a0 <__sflush_r+0x48>
 800419c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800419e:	1ac0      	subs	r0, r0, r3
 80041a0:	2300      	movs	r3, #0
 80041a2:	4602      	mov	r2, r0
 80041a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041a6:	6a21      	ldr	r1, [r4, #32]
 80041a8:	4628      	mov	r0, r5
 80041aa:	47b0      	blx	r6
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	89a3      	ldrh	r3, [r4, #12]
 80041b0:	d106      	bne.n	80041c0 <__sflush_r+0x68>
 80041b2:	6829      	ldr	r1, [r5, #0]
 80041b4:	291d      	cmp	r1, #29
 80041b6:	d848      	bhi.n	800424a <__sflush_r+0xf2>
 80041b8:	4a29      	ldr	r2, [pc, #164]	; (8004260 <__sflush_r+0x108>)
 80041ba:	40ca      	lsrs	r2, r1
 80041bc:	07d6      	lsls	r6, r2, #31
 80041be:	d544      	bpl.n	800424a <__sflush_r+0xf2>
 80041c0:	2200      	movs	r2, #0
 80041c2:	6062      	str	r2, [r4, #4]
 80041c4:	04d9      	lsls	r1, r3, #19
 80041c6:	6922      	ldr	r2, [r4, #16]
 80041c8:	6022      	str	r2, [r4, #0]
 80041ca:	d504      	bpl.n	80041d6 <__sflush_r+0x7e>
 80041cc:	1c42      	adds	r2, r0, #1
 80041ce:	d101      	bne.n	80041d4 <__sflush_r+0x7c>
 80041d0:	682b      	ldr	r3, [r5, #0]
 80041d2:	b903      	cbnz	r3, 80041d6 <__sflush_r+0x7e>
 80041d4:	6560      	str	r0, [r4, #84]	; 0x54
 80041d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041d8:	602f      	str	r7, [r5, #0]
 80041da:	2900      	cmp	r1, #0
 80041dc:	d0c9      	beq.n	8004172 <__sflush_r+0x1a>
 80041de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041e2:	4299      	cmp	r1, r3
 80041e4:	d002      	beq.n	80041ec <__sflush_r+0x94>
 80041e6:	4628      	mov	r0, r5
 80041e8:	f000 f994 	bl	8004514 <_free_r>
 80041ec:	2000      	movs	r0, #0
 80041ee:	6360      	str	r0, [r4, #52]	; 0x34
 80041f0:	e7c0      	b.n	8004174 <__sflush_r+0x1c>
 80041f2:	2301      	movs	r3, #1
 80041f4:	4628      	mov	r0, r5
 80041f6:	47b0      	blx	r6
 80041f8:	1c41      	adds	r1, r0, #1
 80041fa:	d1c8      	bne.n	800418e <__sflush_r+0x36>
 80041fc:	682b      	ldr	r3, [r5, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0c5      	beq.n	800418e <__sflush_r+0x36>
 8004202:	2b1d      	cmp	r3, #29
 8004204:	d001      	beq.n	800420a <__sflush_r+0xb2>
 8004206:	2b16      	cmp	r3, #22
 8004208:	d101      	bne.n	800420e <__sflush_r+0xb6>
 800420a:	602f      	str	r7, [r5, #0]
 800420c:	e7b1      	b.n	8004172 <__sflush_r+0x1a>
 800420e:	89a3      	ldrh	r3, [r4, #12]
 8004210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004214:	81a3      	strh	r3, [r4, #12]
 8004216:	e7ad      	b.n	8004174 <__sflush_r+0x1c>
 8004218:	690f      	ldr	r7, [r1, #16]
 800421a:	2f00      	cmp	r7, #0
 800421c:	d0a9      	beq.n	8004172 <__sflush_r+0x1a>
 800421e:	0793      	lsls	r3, r2, #30
 8004220:	680e      	ldr	r6, [r1, #0]
 8004222:	bf08      	it	eq
 8004224:	694b      	ldreq	r3, [r1, #20]
 8004226:	600f      	str	r7, [r1, #0]
 8004228:	bf18      	it	ne
 800422a:	2300      	movne	r3, #0
 800422c:	eba6 0807 	sub.w	r8, r6, r7
 8004230:	608b      	str	r3, [r1, #8]
 8004232:	f1b8 0f00 	cmp.w	r8, #0
 8004236:	dd9c      	ble.n	8004172 <__sflush_r+0x1a>
 8004238:	4643      	mov	r3, r8
 800423a:	463a      	mov	r2, r7
 800423c:	6a21      	ldr	r1, [r4, #32]
 800423e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004240:	4628      	mov	r0, r5
 8004242:	47b0      	blx	r6
 8004244:	2800      	cmp	r0, #0
 8004246:	dc06      	bgt.n	8004256 <__sflush_r+0xfe>
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800424e:	81a3      	strh	r3, [r4, #12]
 8004250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004254:	e78e      	b.n	8004174 <__sflush_r+0x1c>
 8004256:	4407      	add	r7, r0
 8004258:	eba8 0800 	sub.w	r8, r8, r0
 800425c:	e7e9      	b.n	8004232 <__sflush_r+0xda>
 800425e:	bf00      	nop
 8004260:	20400001 	.word	0x20400001

08004264 <_fflush_r>:
 8004264:	b538      	push	{r3, r4, r5, lr}
 8004266:	690b      	ldr	r3, [r1, #16]
 8004268:	4605      	mov	r5, r0
 800426a:	460c      	mov	r4, r1
 800426c:	b1db      	cbz	r3, 80042a6 <_fflush_r+0x42>
 800426e:	b118      	cbz	r0, 8004278 <_fflush_r+0x14>
 8004270:	6983      	ldr	r3, [r0, #24]
 8004272:	b90b      	cbnz	r3, 8004278 <_fflush_r+0x14>
 8004274:	f000 f860 	bl	8004338 <__sinit>
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <_fflush_r+0x48>)
 800427a:	429c      	cmp	r4, r3
 800427c:	d109      	bne.n	8004292 <_fflush_r+0x2e>
 800427e:	686c      	ldr	r4, [r5, #4]
 8004280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004284:	b17b      	cbz	r3, 80042a6 <_fflush_r+0x42>
 8004286:	4621      	mov	r1, r4
 8004288:	4628      	mov	r0, r5
 800428a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800428e:	f7ff bf63 	b.w	8004158 <__sflush_r>
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <_fflush_r+0x4c>)
 8004294:	429c      	cmp	r4, r3
 8004296:	d101      	bne.n	800429c <_fflush_r+0x38>
 8004298:	68ac      	ldr	r4, [r5, #8]
 800429a:	e7f1      	b.n	8004280 <_fflush_r+0x1c>
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <_fflush_r+0x50>)
 800429e:	429c      	cmp	r4, r3
 80042a0:	bf08      	it	eq
 80042a2:	68ec      	ldreq	r4, [r5, #12]
 80042a4:	e7ec      	b.n	8004280 <_fflush_r+0x1c>
 80042a6:	2000      	movs	r0, #0
 80042a8:	bd38      	pop	{r3, r4, r5, pc}
 80042aa:	bf00      	nop
 80042ac:	0800486c 	.word	0x0800486c
 80042b0:	0800488c 	.word	0x0800488c
 80042b4:	0800484c 	.word	0x0800484c

080042b8 <std>:
 80042b8:	2300      	movs	r3, #0
 80042ba:	b510      	push	{r4, lr}
 80042bc:	4604      	mov	r4, r0
 80042be:	e9c0 3300 	strd	r3, r3, [r0]
 80042c2:	6083      	str	r3, [r0, #8]
 80042c4:	8181      	strh	r1, [r0, #12]
 80042c6:	6643      	str	r3, [r0, #100]	; 0x64
 80042c8:	81c2      	strh	r2, [r0, #14]
 80042ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042ce:	6183      	str	r3, [r0, #24]
 80042d0:	4619      	mov	r1, r3
 80042d2:	2208      	movs	r2, #8
 80042d4:	305c      	adds	r0, #92	; 0x5c
 80042d6:	f7ff fe12 	bl	8003efe <memset>
 80042da:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <std+0x38>)
 80042dc:	6263      	str	r3, [r4, #36]	; 0x24
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <std+0x3c>)
 80042e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <std+0x40>)
 80042e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <std+0x44>)
 80042e8:	6224      	str	r4, [r4, #32]
 80042ea:	6323      	str	r3, [r4, #48]	; 0x30
 80042ec:	bd10      	pop	{r4, pc}
 80042ee:	bf00      	nop
 80042f0:	08004685 	.word	0x08004685
 80042f4:	080046a7 	.word	0x080046a7
 80042f8:	080046df 	.word	0x080046df
 80042fc:	08004703 	.word	0x08004703

08004300 <_cleanup_r>:
 8004300:	4901      	ldr	r1, [pc, #4]	; (8004308 <_cleanup_r+0x8>)
 8004302:	f000 b885 	b.w	8004410 <_fwalk_reent>
 8004306:	bf00      	nop
 8004308:	08004265 	.word	0x08004265

0800430c <__sfmoreglue>:
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	1e4a      	subs	r2, r1, #1
 8004310:	2568      	movs	r5, #104	; 0x68
 8004312:	4355      	muls	r5, r2
 8004314:	460e      	mov	r6, r1
 8004316:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800431a:	f000 f949 	bl	80045b0 <_malloc_r>
 800431e:	4604      	mov	r4, r0
 8004320:	b140      	cbz	r0, 8004334 <__sfmoreglue+0x28>
 8004322:	2100      	movs	r1, #0
 8004324:	e9c0 1600 	strd	r1, r6, [r0]
 8004328:	300c      	adds	r0, #12
 800432a:	60a0      	str	r0, [r4, #8]
 800432c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004330:	f7ff fde5 	bl	8003efe <memset>
 8004334:	4620      	mov	r0, r4
 8004336:	bd70      	pop	{r4, r5, r6, pc}

08004338 <__sinit>:
 8004338:	6983      	ldr	r3, [r0, #24]
 800433a:	b510      	push	{r4, lr}
 800433c:	4604      	mov	r4, r0
 800433e:	bb33      	cbnz	r3, 800438e <__sinit+0x56>
 8004340:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004344:	6503      	str	r3, [r0, #80]	; 0x50
 8004346:	4b12      	ldr	r3, [pc, #72]	; (8004390 <__sinit+0x58>)
 8004348:	4a12      	ldr	r2, [pc, #72]	; (8004394 <__sinit+0x5c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6282      	str	r2, [r0, #40]	; 0x28
 800434e:	4298      	cmp	r0, r3
 8004350:	bf04      	itt	eq
 8004352:	2301      	moveq	r3, #1
 8004354:	6183      	streq	r3, [r0, #24]
 8004356:	f000 f81f 	bl	8004398 <__sfp>
 800435a:	6060      	str	r0, [r4, #4]
 800435c:	4620      	mov	r0, r4
 800435e:	f000 f81b 	bl	8004398 <__sfp>
 8004362:	60a0      	str	r0, [r4, #8]
 8004364:	4620      	mov	r0, r4
 8004366:	f000 f817 	bl	8004398 <__sfp>
 800436a:	2200      	movs	r2, #0
 800436c:	60e0      	str	r0, [r4, #12]
 800436e:	2104      	movs	r1, #4
 8004370:	6860      	ldr	r0, [r4, #4]
 8004372:	f7ff ffa1 	bl	80042b8 <std>
 8004376:	2201      	movs	r2, #1
 8004378:	2109      	movs	r1, #9
 800437a:	68a0      	ldr	r0, [r4, #8]
 800437c:	f7ff ff9c 	bl	80042b8 <std>
 8004380:	2202      	movs	r2, #2
 8004382:	2112      	movs	r1, #18
 8004384:	68e0      	ldr	r0, [r4, #12]
 8004386:	f7ff ff97 	bl	80042b8 <std>
 800438a:	2301      	movs	r3, #1
 800438c:	61a3      	str	r3, [r4, #24]
 800438e:	bd10      	pop	{r4, pc}
 8004390:	08004848 	.word	0x08004848
 8004394:	08004301 	.word	0x08004301

08004398 <__sfp>:
 8004398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439a:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <__sfp+0x70>)
 800439c:	681e      	ldr	r6, [r3, #0]
 800439e:	69b3      	ldr	r3, [r6, #24]
 80043a0:	4607      	mov	r7, r0
 80043a2:	b913      	cbnz	r3, 80043aa <__sfp+0x12>
 80043a4:	4630      	mov	r0, r6
 80043a6:	f7ff ffc7 	bl	8004338 <__sinit>
 80043aa:	3648      	adds	r6, #72	; 0x48
 80043ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043b0:	3b01      	subs	r3, #1
 80043b2:	d503      	bpl.n	80043bc <__sfp+0x24>
 80043b4:	6833      	ldr	r3, [r6, #0]
 80043b6:	b133      	cbz	r3, 80043c6 <__sfp+0x2e>
 80043b8:	6836      	ldr	r6, [r6, #0]
 80043ba:	e7f7      	b.n	80043ac <__sfp+0x14>
 80043bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043c0:	b16d      	cbz	r5, 80043de <__sfp+0x46>
 80043c2:	3468      	adds	r4, #104	; 0x68
 80043c4:	e7f4      	b.n	80043b0 <__sfp+0x18>
 80043c6:	2104      	movs	r1, #4
 80043c8:	4638      	mov	r0, r7
 80043ca:	f7ff ff9f 	bl	800430c <__sfmoreglue>
 80043ce:	6030      	str	r0, [r6, #0]
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d1f1      	bne.n	80043b8 <__sfp+0x20>
 80043d4:	230c      	movs	r3, #12
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	4604      	mov	r4, r0
 80043da:	4620      	mov	r0, r4
 80043dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043de:	4b0b      	ldr	r3, [pc, #44]	; (800440c <__sfp+0x74>)
 80043e0:	6665      	str	r5, [r4, #100]	; 0x64
 80043e2:	e9c4 5500 	strd	r5, r5, [r4]
 80043e6:	60a5      	str	r5, [r4, #8]
 80043e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80043ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80043f0:	2208      	movs	r2, #8
 80043f2:	4629      	mov	r1, r5
 80043f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043f8:	f7ff fd81 	bl	8003efe <memset>
 80043fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004400:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004404:	e7e9      	b.n	80043da <__sfp+0x42>
 8004406:	bf00      	nop
 8004408:	08004848 	.word	0x08004848
 800440c:	ffff0001 	.word	0xffff0001

08004410 <_fwalk_reent>:
 8004410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004414:	4680      	mov	r8, r0
 8004416:	4689      	mov	r9, r1
 8004418:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800441c:	2600      	movs	r6, #0
 800441e:	b914      	cbnz	r4, 8004426 <_fwalk_reent+0x16>
 8004420:	4630      	mov	r0, r6
 8004422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004426:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800442a:	3f01      	subs	r7, #1
 800442c:	d501      	bpl.n	8004432 <_fwalk_reent+0x22>
 800442e:	6824      	ldr	r4, [r4, #0]
 8004430:	e7f5      	b.n	800441e <_fwalk_reent+0xe>
 8004432:	89ab      	ldrh	r3, [r5, #12]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d907      	bls.n	8004448 <_fwalk_reent+0x38>
 8004438:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800443c:	3301      	adds	r3, #1
 800443e:	d003      	beq.n	8004448 <_fwalk_reent+0x38>
 8004440:	4629      	mov	r1, r5
 8004442:	4640      	mov	r0, r8
 8004444:	47c8      	blx	r9
 8004446:	4306      	orrs	r6, r0
 8004448:	3568      	adds	r5, #104	; 0x68
 800444a:	e7ee      	b.n	800442a <_fwalk_reent+0x1a>

0800444c <__swhatbuf_r>:
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	460e      	mov	r6, r1
 8004450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004454:	2900      	cmp	r1, #0
 8004456:	b096      	sub	sp, #88	; 0x58
 8004458:	4614      	mov	r4, r2
 800445a:	461d      	mov	r5, r3
 800445c:	da07      	bge.n	800446e <__swhatbuf_r+0x22>
 800445e:	2300      	movs	r3, #0
 8004460:	602b      	str	r3, [r5, #0]
 8004462:	89b3      	ldrh	r3, [r6, #12]
 8004464:	061a      	lsls	r2, r3, #24
 8004466:	d410      	bmi.n	800448a <__swhatbuf_r+0x3e>
 8004468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800446c:	e00e      	b.n	800448c <__swhatbuf_r+0x40>
 800446e:	466a      	mov	r2, sp
 8004470:	f000 f96e 	bl	8004750 <_fstat_r>
 8004474:	2800      	cmp	r0, #0
 8004476:	dbf2      	blt.n	800445e <__swhatbuf_r+0x12>
 8004478:	9a01      	ldr	r2, [sp, #4]
 800447a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800447e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004482:	425a      	negs	r2, r3
 8004484:	415a      	adcs	r2, r3
 8004486:	602a      	str	r2, [r5, #0]
 8004488:	e7ee      	b.n	8004468 <__swhatbuf_r+0x1c>
 800448a:	2340      	movs	r3, #64	; 0x40
 800448c:	2000      	movs	r0, #0
 800448e:	6023      	str	r3, [r4, #0]
 8004490:	b016      	add	sp, #88	; 0x58
 8004492:	bd70      	pop	{r4, r5, r6, pc}

08004494 <__smakebuf_r>:
 8004494:	898b      	ldrh	r3, [r1, #12]
 8004496:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004498:	079d      	lsls	r5, r3, #30
 800449a:	4606      	mov	r6, r0
 800449c:	460c      	mov	r4, r1
 800449e:	d507      	bpl.n	80044b0 <__smakebuf_r+0x1c>
 80044a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	6123      	str	r3, [r4, #16]
 80044a8:	2301      	movs	r3, #1
 80044aa:	6163      	str	r3, [r4, #20]
 80044ac:	b002      	add	sp, #8
 80044ae:	bd70      	pop	{r4, r5, r6, pc}
 80044b0:	ab01      	add	r3, sp, #4
 80044b2:	466a      	mov	r2, sp
 80044b4:	f7ff ffca 	bl	800444c <__swhatbuf_r>
 80044b8:	9900      	ldr	r1, [sp, #0]
 80044ba:	4605      	mov	r5, r0
 80044bc:	4630      	mov	r0, r6
 80044be:	f000 f877 	bl	80045b0 <_malloc_r>
 80044c2:	b948      	cbnz	r0, 80044d8 <__smakebuf_r+0x44>
 80044c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044c8:	059a      	lsls	r2, r3, #22
 80044ca:	d4ef      	bmi.n	80044ac <__smakebuf_r+0x18>
 80044cc:	f023 0303 	bic.w	r3, r3, #3
 80044d0:	f043 0302 	orr.w	r3, r3, #2
 80044d4:	81a3      	strh	r3, [r4, #12]
 80044d6:	e7e3      	b.n	80044a0 <__smakebuf_r+0xc>
 80044d8:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <__smakebuf_r+0x7c>)
 80044da:	62b3      	str	r3, [r6, #40]	; 0x28
 80044dc:	89a3      	ldrh	r3, [r4, #12]
 80044de:	6020      	str	r0, [r4, #0]
 80044e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e4:	81a3      	strh	r3, [r4, #12]
 80044e6:	9b00      	ldr	r3, [sp, #0]
 80044e8:	6163      	str	r3, [r4, #20]
 80044ea:	9b01      	ldr	r3, [sp, #4]
 80044ec:	6120      	str	r0, [r4, #16]
 80044ee:	b15b      	cbz	r3, 8004508 <__smakebuf_r+0x74>
 80044f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044f4:	4630      	mov	r0, r6
 80044f6:	f000 f93d 	bl	8004774 <_isatty_r>
 80044fa:	b128      	cbz	r0, 8004508 <__smakebuf_r+0x74>
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	f023 0303 	bic.w	r3, r3, #3
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	81a3      	strh	r3, [r4, #12]
 8004508:	89a3      	ldrh	r3, [r4, #12]
 800450a:	431d      	orrs	r5, r3
 800450c:	81a5      	strh	r5, [r4, #12]
 800450e:	e7cd      	b.n	80044ac <__smakebuf_r+0x18>
 8004510:	08004301 	.word	0x08004301

08004514 <_free_r>:
 8004514:	b538      	push	{r3, r4, r5, lr}
 8004516:	4605      	mov	r5, r0
 8004518:	2900      	cmp	r1, #0
 800451a:	d045      	beq.n	80045a8 <_free_r+0x94>
 800451c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004520:	1f0c      	subs	r4, r1, #4
 8004522:	2b00      	cmp	r3, #0
 8004524:	bfb8      	it	lt
 8004526:	18e4      	addlt	r4, r4, r3
 8004528:	f000 f946 	bl	80047b8 <__malloc_lock>
 800452c:	4a1f      	ldr	r2, [pc, #124]	; (80045ac <_free_r+0x98>)
 800452e:	6813      	ldr	r3, [r2, #0]
 8004530:	4610      	mov	r0, r2
 8004532:	b933      	cbnz	r3, 8004542 <_free_r+0x2e>
 8004534:	6063      	str	r3, [r4, #4]
 8004536:	6014      	str	r4, [r2, #0]
 8004538:	4628      	mov	r0, r5
 800453a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800453e:	f000 b93c 	b.w	80047ba <__malloc_unlock>
 8004542:	42a3      	cmp	r3, r4
 8004544:	d90c      	bls.n	8004560 <_free_r+0x4c>
 8004546:	6821      	ldr	r1, [r4, #0]
 8004548:	1862      	adds	r2, r4, r1
 800454a:	4293      	cmp	r3, r2
 800454c:	bf04      	itt	eq
 800454e:	681a      	ldreq	r2, [r3, #0]
 8004550:	685b      	ldreq	r3, [r3, #4]
 8004552:	6063      	str	r3, [r4, #4]
 8004554:	bf04      	itt	eq
 8004556:	1852      	addeq	r2, r2, r1
 8004558:	6022      	streq	r2, [r4, #0]
 800455a:	6004      	str	r4, [r0, #0]
 800455c:	e7ec      	b.n	8004538 <_free_r+0x24>
 800455e:	4613      	mov	r3, r2
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	b10a      	cbz	r2, 8004568 <_free_r+0x54>
 8004564:	42a2      	cmp	r2, r4
 8004566:	d9fa      	bls.n	800455e <_free_r+0x4a>
 8004568:	6819      	ldr	r1, [r3, #0]
 800456a:	1858      	adds	r0, r3, r1
 800456c:	42a0      	cmp	r0, r4
 800456e:	d10b      	bne.n	8004588 <_free_r+0x74>
 8004570:	6820      	ldr	r0, [r4, #0]
 8004572:	4401      	add	r1, r0
 8004574:	1858      	adds	r0, r3, r1
 8004576:	4282      	cmp	r2, r0
 8004578:	6019      	str	r1, [r3, #0]
 800457a:	d1dd      	bne.n	8004538 <_free_r+0x24>
 800457c:	6810      	ldr	r0, [r2, #0]
 800457e:	6852      	ldr	r2, [r2, #4]
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	4401      	add	r1, r0
 8004584:	6019      	str	r1, [r3, #0]
 8004586:	e7d7      	b.n	8004538 <_free_r+0x24>
 8004588:	d902      	bls.n	8004590 <_free_r+0x7c>
 800458a:	230c      	movs	r3, #12
 800458c:	602b      	str	r3, [r5, #0]
 800458e:	e7d3      	b.n	8004538 <_free_r+0x24>
 8004590:	6820      	ldr	r0, [r4, #0]
 8004592:	1821      	adds	r1, r4, r0
 8004594:	428a      	cmp	r2, r1
 8004596:	bf04      	itt	eq
 8004598:	6811      	ldreq	r1, [r2, #0]
 800459a:	6852      	ldreq	r2, [r2, #4]
 800459c:	6062      	str	r2, [r4, #4]
 800459e:	bf04      	itt	eq
 80045a0:	1809      	addeq	r1, r1, r0
 80045a2:	6021      	streq	r1, [r4, #0]
 80045a4:	605c      	str	r4, [r3, #4]
 80045a6:	e7c7      	b.n	8004538 <_free_r+0x24>
 80045a8:	bd38      	pop	{r3, r4, r5, pc}
 80045aa:	bf00      	nop
 80045ac:	20012e08 	.word	0x20012e08

080045b0 <_malloc_r>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	1ccd      	adds	r5, r1, #3
 80045b4:	f025 0503 	bic.w	r5, r5, #3
 80045b8:	3508      	adds	r5, #8
 80045ba:	2d0c      	cmp	r5, #12
 80045bc:	bf38      	it	cc
 80045be:	250c      	movcc	r5, #12
 80045c0:	2d00      	cmp	r5, #0
 80045c2:	4606      	mov	r6, r0
 80045c4:	db01      	blt.n	80045ca <_malloc_r+0x1a>
 80045c6:	42a9      	cmp	r1, r5
 80045c8:	d903      	bls.n	80045d2 <_malloc_r+0x22>
 80045ca:	230c      	movs	r3, #12
 80045cc:	6033      	str	r3, [r6, #0]
 80045ce:	2000      	movs	r0, #0
 80045d0:	bd70      	pop	{r4, r5, r6, pc}
 80045d2:	f000 f8f1 	bl	80047b8 <__malloc_lock>
 80045d6:	4a21      	ldr	r2, [pc, #132]	; (800465c <_malloc_r+0xac>)
 80045d8:	6814      	ldr	r4, [r2, #0]
 80045da:	4621      	mov	r1, r4
 80045dc:	b991      	cbnz	r1, 8004604 <_malloc_r+0x54>
 80045de:	4c20      	ldr	r4, [pc, #128]	; (8004660 <_malloc_r+0xb0>)
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	b91b      	cbnz	r3, 80045ec <_malloc_r+0x3c>
 80045e4:	4630      	mov	r0, r6
 80045e6:	f000 f83d 	bl	8004664 <_sbrk_r>
 80045ea:	6020      	str	r0, [r4, #0]
 80045ec:	4629      	mov	r1, r5
 80045ee:	4630      	mov	r0, r6
 80045f0:	f000 f838 	bl	8004664 <_sbrk_r>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	d124      	bne.n	8004642 <_malloc_r+0x92>
 80045f8:	230c      	movs	r3, #12
 80045fa:	6033      	str	r3, [r6, #0]
 80045fc:	4630      	mov	r0, r6
 80045fe:	f000 f8dc 	bl	80047ba <__malloc_unlock>
 8004602:	e7e4      	b.n	80045ce <_malloc_r+0x1e>
 8004604:	680b      	ldr	r3, [r1, #0]
 8004606:	1b5b      	subs	r3, r3, r5
 8004608:	d418      	bmi.n	800463c <_malloc_r+0x8c>
 800460a:	2b0b      	cmp	r3, #11
 800460c:	d90f      	bls.n	800462e <_malloc_r+0x7e>
 800460e:	600b      	str	r3, [r1, #0]
 8004610:	50cd      	str	r5, [r1, r3]
 8004612:	18cc      	adds	r4, r1, r3
 8004614:	4630      	mov	r0, r6
 8004616:	f000 f8d0 	bl	80047ba <__malloc_unlock>
 800461a:	f104 000b 	add.w	r0, r4, #11
 800461e:	1d23      	adds	r3, r4, #4
 8004620:	f020 0007 	bic.w	r0, r0, #7
 8004624:	1ac3      	subs	r3, r0, r3
 8004626:	d0d3      	beq.n	80045d0 <_malloc_r+0x20>
 8004628:	425a      	negs	r2, r3
 800462a:	50e2      	str	r2, [r4, r3]
 800462c:	e7d0      	b.n	80045d0 <_malloc_r+0x20>
 800462e:	428c      	cmp	r4, r1
 8004630:	684b      	ldr	r3, [r1, #4]
 8004632:	bf16      	itet	ne
 8004634:	6063      	strne	r3, [r4, #4]
 8004636:	6013      	streq	r3, [r2, #0]
 8004638:	460c      	movne	r4, r1
 800463a:	e7eb      	b.n	8004614 <_malloc_r+0x64>
 800463c:	460c      	mov	r4, r1
 800463e:	6849      	ldr	r1, [r1, #4]
 8004640:	e7cc      	b.n	80045dc <_malloc_r+0x2c>
 8004642:	1cc4      	adds	r4, r0, #3
 8004644:	f024 0403 	bic.w	r4, r4, #3
 8004648:	42a0      	cmp	r0, r4
 800464a:	d005      	beq.n	8004658 <_malloc_r+0xa8>
 800464c:	1a21      	subs	r1, r4, r0
 800464e:	4630      	mov	r0, r6
 8004650:	f000 f808 	bl	8004664 <_sbrk_r>
 8004654:	3001      	adds	r0, #1
 8004656:	d0cf      	beq.n	80045f8 <_malloc_r+0x48>
 8004658:	6025      	str	r5, [r4, #0]
 800465a:	e7db      	b.n	8004614 <_malloc_r+0x64>
 800465c:	20012e08 	.word	0x20012e08
 8004660:	20012e0c 	.word	0x20012e0c

08004664 <_sbrk_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4c06      	ldr	r4, [pc, #24]	; (8004680 <_sbrk_r+0x1c>)
 8004668:	2300      	movs	r3, #0
 800466a:	4605      	mov	r5, r0
 800466c:	4608      	mov	r0, r1
 800466e:	6023      	str	r3, [r4, #0]
 8004670:	f7fc f8b8 	bl	80007e4 <_sbrk>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d102      	bne.n	800467e <_sbrk_r+0x1a>
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	b103      	cbz	r3, 800467e <_sbrk_r+0x1a>
 800467c:	602b      	str	r3, [r5, #0]
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	20012e54 	.word	0x20012e54

08004684 <__sread>:
 8004684:	b510      	push	{r4, lr}
 8004686:	460c      	mov	r4, r1
 8004688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800468c:	f000 f896 	bl	80047bc <_read_r>
 8004690:	2800      	cmp	r0, #0
 8004692:	bfab      	itete	ge
 8004694:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004696:	89a3      	ldrhlt	r3, [r4, #12]
 8004698:	181b      	addge	r3, r3, r0
 800469a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800469e:	bfac      	ite	ge
 80046a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80046a2:	81a3      	strhlt	r3, [r4, #12]
 80046a4:	bd10      	pop	{r4, pc}

080046a6 <__swrite>:
 80046a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046aa:	461f      	mov	r7, r3
 80046ac:	898b      	ldrh	r3, [r1, #12]
 80046ae:	05db      	lsls	r3, r3, #23
 80046b0:	4605      	mov	r5, r0
 80046b2:	460c      	mov	r4, r1
 80046b4:	4616      	mov	r6, r2
 80046b6:	d505      	bpl.n	80046c4 <__swrite+0x1e>
 80046b8:	2302      	movs	r3, #2
 80046ba:	2200      	movs	r2, #0
 80046bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046c0:	f000 f868 	bl	8004794 <_lseek_r>
 80046c4:	89a3      	ldrh	r3, [r4, #12]
 80046c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046ce:	81a3      	strh	r3, [r4, #12]
 80046d0:	4632      	mov	r2, r6
 80046d2:	463b      	mov	r3, r7
 80046d4:	4628      	mov	r0, r5
 80046d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046da:	f000 b817 	b.w	800470c <_write_r>

080046de <__sseek>:
 80046de:	b510      	push	{r4, lr}
 80046e0:	460c      	mov	r4, r1
 80046e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e6:	f000 f855 	bl	8004794 <_lseek_r>
 80046ea:	1c43      	adds	r3, r0, #1
 80046ec:	89a3      	ldrh	r3, [r4, #12]
 80046ee:	bf15      	itete	ne
 80046f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80046f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046fa:	81a3      	strheq	r3, [r4, #12]
 80046fc:	bf18      	it	ne
 80046fe:	81a3      	strhne	r3, [r4, #12]
 8004700:	bd10      	pop	{r4, pc}

08004702 <__sclose>:
 8004702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004706:	f000 b813 	b.w	8004730 <_close_r>
	...

0800470c <_write_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	4c07      	ldr	r4, [pc, #28]	; (800472c <_write_r+0x20>)
 8004710:	4605      	mov	r5, r0
 8004712:	4608      	mov	r0, r1
 8004714:	4611      	mov	r1, r2
 8004716:	2200      	movs	r2, #0
 8004718:	6022      	str	r2, [r4, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	f7fc f812 	bl	8000744 <_write>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d102      	bne.n	800472a <_write_r+0x1e>
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	b103      	cbz	r3, 800472a <_write_r+0x1e>
 8004728:	602b      	str	r3, [r5, #0]
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	20012e54 	.word	0x20012e54

08004730 <_close_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4c06      	ldr	r4, [pc, #24]	; (800474c <_close_r+0x1c>)
 8004734:	2300      	movs	r3, #0
 8004736:	4605      	mov	r5, r0
 8004738:	4608      	mov	r0, r1
 800473a:	6023      	str	r3, [r4, #0]
 800473c:	f7fc f81e 	bl	800077c <_close>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d102      	bne.n	800474a <_close_r+0x1a>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	b103      	cbz	r3, 800474a <_close_r+0x1a>
 8004748:	602b      	str	r3, [r5, #0]
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	20012e54 	.word	0x20012e54

08004750 <_fstat_r>:
 8004750:	b538      	push	{r3, r4, r5, lr}
 8004752:	4c07      	ldr	r4, [pc, #28]	; (8004770 <_fstat_r+0x20>)
 8004754:	2300      	movs	r3, #0
 8004756:	4605      	mov	r5, r0
 8004758:	4608      	mov	r0, r1
 800475a:	4611      	mov	r1, r2
 800475c:	6023      	str	r3, [r4, #0]
 800475e:	f7fc f819 	bl	8000794 <_fstat>
 8004762:	1c43      	adds	r3, r0, #1
 8004764:	d102      	bne.n	800476c <_fstat_r+0x1c>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	b103      	cbz	r3, 800476c <_fstat_r+0x1c>
 800476a:	602b      	str	r3, [r5, #0]
 800476c:	bd38      	pop	{r3, r4, r5, pc}
 800476e:	bf00      	nop
 8004770:	20012e54 	.word	0x20012e54

08004774 <_isatty_r>:
 8004774:	b538      	push	{r3, r4, r5, lr}
 8004776:	4c06      	ldr	r4, [pc, #24]	; (8004790 <_isatty_r+0x1c>)
 8004778:	2300      	movs	r3, #0
 800477a:	4605      	mov	r5, r0
 800477c:	4608      	mov	r0, r1
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	f7fc f818 	bl	80007b4 <_isatty>
 8004784:	1c43      	adds	r3, r0, #1
 8004786:	d102      	bne.n	800478e <_isatty_r+0x1a>
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	b103      	cbz	r3, 800478e <_isatty_r+0x1a>
 800478c:	602b      	str	r3, [r5, #0]
 800478e:	bd38      	pop	{r3, r4, r5, pc}
 8004790:	20012e54 	.word	0x20012e54

08004794 <_lseek_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	4c07      	ldr	r4, [pc, #28]	; (80047b4 <_lseek_r+0x20>)
 8004798:	4605      	mov	r5, r0
 800479a:	4608      	mov	r0, r1
 800479c:	4611      	mov	r1, r2
 800479e:	2200      	movs	r2, #0
 80047a0:	6022      	str	r2, [r4, #0]
 80047a2:	461a      	mov	r2, r3
 80047a4:	f7fc f811 	bl	80007ca <_lseek>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	d102      	bne.n	80047b2 <_lseek_r+0x1e>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	b103      	cbz	r3, 80047b2 <_lseek_r+0x1e>
 80047b0:	602b      	str	r3, [r5, #0]
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
 80047b4:	20012e54 	.word	0x20012e54

080047b8 <__malloc_lock>:
 80047b8:	4770      	bx	lr

080047ba <__malloc_unlock>:
 80047ba:	4770      	bx	lr

080047bc <_read_r>:
 80047bc:	b538      	push	{r3, r4, r5, lr}
 80047be:	4c07      	ldr	r4, [pc, #28]	; (80047dc <_read_r+0x20>)
 80047c0:	4605      	mov	r5, r0
 80047c2:	4608      	mov	r0, r1
 80047c4:	4611      	mov	r1, r2
 80047c6:	2200      	movs	r2, #0
 80047c8:	6022      	str	r2, [r4, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	f7fb ff9d 	bl	800070a <_read>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d102      	bne.n	80047da <_read_r+0x1e>
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	b103      	cbz	r3, 80047da <_read_r+0x1e>
 80047d8:	602b      	str	r3, [r5, #0]
 80047da:	bd38      	pop	{r3, r4, r5, pc}
 80047dc:	20012e54 	.word	0x20012e54

080047e0 <_init>:
 80047e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e2:	bf00      	nop
 80047e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e6:	bc08      	pop	{r3}
 80047e8:	469e      	mov	lr, r3
 80047ea:	4770      	bx	lr

080047ec <_fini>:
 80047ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ee:	bf00      	nop
 80047f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f2:	bc08      	pop	{r3}
 80047f4:	469e      	mov	lr, r3
 80047f6:	4770      	bx	lr
